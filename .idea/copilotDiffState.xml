<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.campus_lost_found&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.campus_lost_found&quot;&#10;        minSdk = 26&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;&#10;    lint {&#10;        baseline = file(&quot;lint-baseline.xml&quot;)&#10;        abortOnError = false&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.activity)&#10;    implementation(libs.androidx.constraintlayout)&#10;&#10;    // Firebase (keeping auth and firestore, removing storage)&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:32.7.0&quot;))&#10;    implementation(&quot;com.google.firebase:firebase-analytics&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-auth&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-firestore&quot;)&#10;&#10;    // Supabase for image storage&#10;    implementation(&quot;io.github.jan-tennert.supabase:storage-kt:2.6.0&quot;)&#10;    implementation(&quot;io.github.jan-tennert.supabase:postgrest-kt:2.6.0&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-android:2.3.7&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-core:2.3.7&quot;)&#10;&#10;    // Navigation Component (required for NavHostFragment)&#10;    implementation(&quot;androidx.navigation:navigation-fragment-ktx:2.7.6&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-ui-ktx:2.7.6&quot;)&#10;&#10;    // Image loading with Glide (required for ItemsAdapter)&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.16.0&quot;)&#10;&#10;    // Google Play Services Auth (required for Google Sign-In)&#10;    implementation(&quot;com.google.android.gms:play-services-auth:21.0.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    id(&quot;com.google.gms.google-services&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.campus_lost_found&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.campus_lost_found&quot;&#10;        minSdk = 26&#10;        targetSdk = 34&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;&#10;    lint {&#10;        baseline = file(&quot;lint-baseline.xml&quot;)&#10;        abortOnError = false&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.activity)&#10;    implementation(libs.androidx.constraintlayout)&#10;&#10;    // Firebase (keeping auth and firestore, removing storage)&#10;    implementation(platform(&quot;com.google.firebase:firebase-bom:32.7.0&quot;))&#10;    implementation(&quot;com.google.firebase:firebase-analytics&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-auth&quot;)&#10;    implementation(&quot;com.google.firebase:firebase-firestore&quot;)&#10;&#10;    // Supabase for image storage&#10;    implementation(&quot;io.github.jan-tennert.supabase:storage-kt:2.6.0&quot;)&#10;    implementation(&quot;io.github.jan-tennert.supabase:postgrest-kt:2.6.0&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-android:2.3.7&quot;)&#10;    implementation(&quot;io.ktor:ktor-client-core:2.3.7&quot;)&#10;&#10;    // Navigation Component (required for NavHostFragment)&#10;    implementation(&quot;androidx.navigation:navigation-fragment-ktx:2.7.6&quot;)&#10;    implementation(&quot;androidx.navigation:navigation-ui-ktx:2.7.6&quot;)&#10;&#10;    // ViewPager2 for tab navigation&#10;    implementation(&quot;androidx.viewpager2:viewpager2:1.0.0&quot;)&#10;&#10;    // Image loading with Glide (required for ItemsAdapter)&#10;    implementation(&quot;com.github.bumptech.glide:glide:4.16.0&quot;)&#10;    annotationProcessor(&quot;com.github.bumptech.glide:compiler:4.16.0&quot;)&#10;&#10;    // Google Play Services Auth (required for Google Sign-In)&#10;    implementation(&quot;com.google.android.gms:play-services-auth:21.0.0&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.CAMPUS_LOST_FOUND&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.LoginActivity&quot;&#10;            android:exported=&quot;true&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;false&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.ReportItemActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:parentActivityName=&quot;.MainActivity&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- Required permissions for Firebase and networking --&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.CampusLostFoundApplication&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.CAMPUS_LOST_FOUND&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.LoginActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ReportItemActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:parentActivityName=&quot;.MainActivity&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.AdminDashboardActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:parentActivityName=&quot;.MainActivity&quot;&#13;&#10;            android:label=&quot;Admin Dashboard&quot; /&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/LostItemsFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/LostItemsFragment.kt" />
              <option name="originalContent" value="package com.example.campus_lost_found&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.appcompat.widget.SearchView&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.campus_lost_found.adapter.ItemsAdapter&#10;import com.example.campus_lost_found.model.LostItem&#10;import com.example.campus_lost_found.repository.ItemRepository&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.firebase.auth.FirebaseAuth&#10;&#10;class LostItemsFragment : Fragment() {&#10;&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var searchView: SearchView&#10;    private val itemRepository = ItemRepository()&#10;    private val currentUserId: String&#10;        get() = FirebaseAuth.getInstance().currentUser?.uid ?: &quot;&quot;&#10;&#10;    private var lostItems = listOf&lt;LostItem&gt;()&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.fragment_items_list, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        recyclerView = view.findViewById(R.id.itemsRecyclerView)&#10;        searchView = view.findViewById(R.id.searchView)&#10;&#10;        setupRecyclerView()&#10;        setupSearch()&#10;        loadLostItems()&#10;    }&#10;&#10;    private fun setupRecyclerView() {&#10;        recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;        recyclerView.setHasFixedSize(true)&#10;    }&#10;&#10;    private fun setupSearch() {&#10;        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {&#10;            override fun onQueryTextSubmit(query: String?): Boolean {&#10;                filterItems(query)&#10;                return false&#10;            }&#10;&#10;            override fun onQueryTextChange(newText: String?): Boolean {&#10;                filterItems(newText)&#10;                return false&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun filterItems(query: String?) {&#10;        if (query.isNullOrBlank()) {&#10;            updateRecyclerView(lostItems)&#10;            return&#10;        }&#10;&#10;        val filteredList = lostItems.filter { item -&gt;&#10;            item.name.contains(query, ignoreCase = true) ||&#10;            item.description.contains(query, ignoreCase = true) ||&#10;            item.category.contains(query, ignoreCase = true) ||&#10;            item.location.contains(query, ignoreCase = true)&#10;        }&#10;&#10;        updateRecyclerView(filteredList)&#10;    }&#10;&#10;    private fun loadLostItems() {&#10;        Log.d(&quot;LostItemsFragment&quot;, &quot;Loading lost items from all users...&quot;)&#10;&#10;        itemRepository.getLostItems().get()&#10;            .addOnSuccessListener { snapshot -&gt;&#10;                Log.d(&quot;LostItemsFragment&quot;, &quot;Successfully loaded ${snapshot.size()} lost items&quot;)&#10;                val items = snapshot.toObjects(LostItem::class.java)&#10;&#10;                // Debug: Log each item to see what's being loaded&#10;                items.forEachIndexed { index, item -&gt;&#10;                    Log.d(&quot;LostItemsFragment&quot;, &quot;Item $index: ${item.name} by ${item.reportedByName} (${item.reportedBy})&quot;)&#10;                }&#10;&#10;                lostItems = items&#10;                updateRecyclerView(items)&#10;&#10;                // Show empty state if no items&#10;                if (items.isEmpty()) {&#10;                    showEmptyState(&quot;No lost items found. Be the first to report!&quot;)&#10;                }&#10;            }&#10;            .addOnFailureListener { exception -&gt;&#10;                Log.e(&quot;LostItemsFragment&quot;, &quot;Failed to load lost items: ${exception.message}&quot;)&#10;                showErrorDialog(&quot;Failed to load lost items: ${exception.message}&quot;)&#10;                showEmptyState(&quot;Failed to load items. Please check your connection.&quot;)&#10;            }&#10;    }&#10;&#10;    private fun updateRecyclerView(items: List&lt;LostItem&gt;) {&#10;        val adapter = ItemsAdapter(&#10;            items = items.toMutableList(),&#10;            isLostItemsList = true,&#10;            currentUserId = currentUserId,&#10;            onItemClick = { item -&gt;&#10;                showItemDetailsDialog(item as LostItem)&#10;            },&#10;            onClaimButtonClick = { item -&gt;&#10;                handleClaimRequest(item as LostItem)&#10;            }&#10;        )&#10;        recyclerView.adapter = adapter&#10;    }&#10;&#10;    private fun showItemDetailsDialog(item: LostItem) {&#10;        val message = &quot;&quot;&quot;&#10;            Name: ${item.name}&#10;            Category: ${item.category}&#10;            Location: ${item.location}&#10;            Description: ${item.description}&#10;            Date Lost: ${item.dateLost.toDate()}&#10;            Reported by: ${item.reportedByName}&#10;        &quot;&quot;&quot;.trimIndent()&#10;&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Item Details&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;Close&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun handleClaimRequest(item: LostItem) {&#10;        if (currentUserId.isEmpty()) {&#10;            MaterialAlertDialogBuilder(requireContext())&#10;                .setTitle(&quot;Authentication Required&quot;)&#10;                .setMessage(&quot;Please sign in to contact the reporter.&quot;)&#10;                .setPositiveButton(&quot;OK&quot;, null)&#10;                .show()&#10;            return&#10;        }&#10;&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Contact Reporter&quot;)&#10;            .setMessage(&quot;Do you think this item belongs to you? Contact the person who reported it lost.&quot;)&#10;            .setPositiveButton(&quot;Contact&quot;) { _, _ -&gt;&#10;                showContactInfoDialog(item)&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showContactInfoDialog(item: LostItem) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Contact Information&quot;)&#10;            .setMessage(&quot;Reporter: ${item.reportedByName}\n\nNote: In a full implementation, this would show contact details or open an in-app messaging system.&quot;)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showErrorDialog(message: String) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Error&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showEmptyState(message: String) {&#10;        // You can add an empty state view here if needed&#10;        android.widget.Toast.makeText(requireContext(), message, android.widget.Toast.LENGTH_LONG).show()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        loadLostItems() // Refresh data when coming back to this fragment&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.campus_lost_found&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.appcompat.widget.SearchView&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.campus_lost_found.adapter.ItemsAdapter&#10;import com.example.campus_lost_found.model.LostItem&#10;import com.example.campus_lost_found.repository.ItemRepository&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.firebase.auth.FirebaseAuth&#10;&#10;class LostItemsFragment : Fragment() {&#10;&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var searchView: SearchView&#10;    private val itemRepository = ItemRepository()&#10;    private val currentUserId: String&#10;        get() = FirebaseAuth.getInstance().currentUser?.uid ?: &quot;&quot;&#10;&#10;    private var lostItems = listOf&lt;LostItem&gt;()&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.fragment_items_list, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        try {&#10;            // Safe view initialization with null checks&#10;            recyclerView = view.findViewById(R.id.itemsRecyclerView) ?: throw IllegalStateException(&quot;RecyclerView not found&quot;)&#10;            searchView = view.findViewById(R.id.searchView) ?: throw IllegalStateException(&quot;SearchView not found&quot;)&#10;&#10;            setupRecyclerView()&#10;            setupSearch()&#10;            loadLostItems()&#10;            &#10;        } catch (e: Exception) {&#10;            Log.e(&quot;LostItemsFragment&quot;, &quot;Error in onViewCreated: ${e.message}&quot;)&#10;            // Show error to user instead of crashing&#10;            android.widget.Toast.makeText(requireContext(), &quot;Error loading fragment&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun setupRecyclerView() {&#10;        try {&#10;            recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;            recyclerView.setHasFixedSize(true)&#10;            &#10;            // Set empty adapter initially to prevent crashes&#10;            recyclerView.adapter = ItemsAdapter(&#10;                items = mutableListOf(),&#10;                isLostItemsList = true,&#10;                currentUserId = currentUserId,&#10;                onItemClick = { },&#10;                onClaimButtonClick = { }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;LostItemsFragment&quot;, &quot;Error setting up RecyclerView: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupSearch() {&#10;        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {&#10;            override fun onQueryTextSubmit(query: String?): Boolean {&#10;                filterItems(query)&#10;                return false&#10;            }&#10;&#10;            override fun onQueryTextChange(newText: String?): Boolean {&#10;                filterItems(newText)&#10;                return false&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun filterItems(query: String?) {&#10;        if (query.isNullOrBlank()) {&#10;            updateRecyclerView(lostItems)&#10;            return&#10;        }&#10;&#10;        val filteredList = lostItems.filter { item -&gt;&#10;            item.name.contains(query, ignoreCase = true) ||&#10;            item.description.contains(query, ignoreCase = true) ||&#10;            item.category.contains(query, ignoreCase = true) ||&#10;            item.location.contains(query, ignoreCase = true)&#10;        }&#10;&#10;        updateRecyclerView(filteredList)&#10;    }&#10;&#10;    private fun loadLostItems() {&#10;        Log.d(&quot;LostItemsFragment&quot;, &quot;Loading lost items from all users...&quot;)&#10;&#10;        itemRepository.getLostItems().get()&#10;            .addOnSuccessListener { snapshot -&gt;&#10;                Log.d(&quot;LostItemsFragment&quot;, &quot;Successfully loaded ${snapshot.size()} lost items&quot;)&#10;                val items = snapshot.toObjects(LostItem::class.java)&#10;&#10;                // Debug: Log each item to see what's being loaded&#10;                items.forEachIndexed { index, item -&gt;&#10;                    Log.d(&quot;LostItemsFragment&quot;, &quot;Item $index: ${item.name} by ${item.reportedByName} (${item.reportedBy})&quot;)&#10;                }&#10;&#10;                lostItems = items&#10;                updateRecyclerView(items)&#10;&#10;                // Show empty state if no items&#10;                if (items.isEmpty()) {&#10;                    showEmptyState(&quot;No lost items found. Be the first to report!&quot;)&#10;                }&#10;            }&#10;            .addOnFailureListener { exception -&gt;&#10;                Log.e(&quot;LostItemsFragment&quot;, &quot;Failed to load lost items: ${exception.message}&quot;)&#10;                showErrorDialog(&quot;Failed to load lost items: ${exception.message}&quot;)&#10;                showEmptyState(&quot;Failed to load items. Please check your connection.&quot;)&#10;            }&#10;    }&#10;&#10;    private fun updateRecyclerView(items: List&lt;LostItem&gt;) {&#10;        val adapter = ItemsAdapter(&#10;            items = items.toMutableList(),&#10;            isLostItemsList = true,&#10;            currentUserId = currentUserId,&#10;            onItemClick = { item -&gt;&#10;                showItemDetailsDialog(item as LostItem)&#10;            },&#10;            onClaimButtonClick = { item -&gt;&#10;                handleClaimRequest(item as LostItem)&#10;            }&#10;        )&#10;        recyclerView.adapter = adapter&#10;    }&#10;&#10;    private fun showItemDetailsDialog(item: LostItem) {&#10;        val message = &quot;&quot;&quot;&#10;            Name: ${item.name}&#10;            Category: ${item.category}&#10;            Location: ${item.location}&#10;            Description: ${item.description}&#10;            Date Lost: ${item.dateLost.toDate()}&#10;            Reported by: ${item.reportedByName}&#10;        &quot;&quot;&quot;.trimIndent()&#10;&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Item Details&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;Close&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun handleClaimRequest(item: LostItem) {&#10;        if (currentUserId.isEmpty()) {&#10;            MaterialAlertDialogBuilder(requireContext())&#10;                .setTitle(&quot;Authentication Required&quot;)&#10;                .setMessage(&quot;Please sign in to contact the reporter.&quot;)&#10;                .setPositiveButton(&quot;OK&quot;, null)&#10;                .show()&#10;            return&#10;        }&#10;&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Contact Reporter&quot;)&#10;            .setMessage(&quot;Do you think this item belongs to you? Contact the person who reported it lost.&quot;)&#10;            .setPositiveButton(&quot;Contact&quot;) { _, _ -&gt;&#10;                showContactInfoDialog(item)&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showContactInfoDialog(item: LostItem) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Contact Information&quot;)&#10;            .setMessage(&quot;Reporter: ${item.reportedByName}\n\nNote: In a full implementation, this would show contact details or open an in-app messaging system.&quot;)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showErrorDialog(message: String) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Error&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showEmptyState(message: String) {&#10;        // You can add an empty state view here if needed&#10;        android.widget.Toast.makeText(requireContext(), message, android.widget.Toast.LENGTH_LONG).show()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        loadLostItems() // Refresh data when coming back to this fragment&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/MyReportsFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/MyReportsFragment.kt" />
              <option name="originalContent" value="package com.example.campus_lost_found&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.appcompat.widget.SearchView&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.campus_lost_found.adapter.ItemsAdapter&#10;import com.example.campus_lost_found.model.FoundItem&#10;import com.example.campus_lost_found.model.Item&#10;import com.example.campus_lost_found.model.LostItem&#10;import com.example.campus_lost_found.repository.ItemRepository&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.android.material.tabs.TabLayout&#10;import com.google.firebase.auth.FirebaseAuth&#10;&#10;class MyReportsFragment : Fragment() {&#10;&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var searchView: SearchView&#10;    private lateinit var tabLayout: TabLayout&#10;    private lateinit var noItemsTextView: TextView&#10;    private val itemRepository = ItemRepository()&#10;    private val currentUserId: String&#10;        get() = FirebaseAuth.getInstance().currentUser?.uid ?: &quot;&quot;&#10;&#10;    private var myLostItems = listOf&lt;LostItem&gt;()&#10;    private var myFoundItems = listOf&lt;FoundItem&gt;()&#10;    private var displayingLostItems = true&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.fragment_items_list, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        try {&#10;            // Safe view initialization with null checks&#10;            recyclerView = view.findViewById(R.id.itemsRecyclerView) ?: throw IllegalStateException(&quot;RecyclerView not found&quot;)&#10;            searchView = view.findViewById(R.id.searchView) ?: throw IllegalStateException(&quot;SearchView not found&quot;)&#10;            tabLayout = view.findViewById(R.id.myReportsTabLayout) ?: throw IllegalStateException(&quot;TabLayout not found&quot;)&#10;            noItemsTextView = view.findViewById(R.id.empty_view) ?: throw IllegalStateException(&quot;Empty view not found&quot;)&#10;&#10;            setupRecyclerView()&#10;            setupTabLayout()&#10;            setupSearch()&#10;            loadMyItems()&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;MyReportsFragment&quot;, &quot;Error in onViewCreated: ${e.message}&quot;)&#10;            // Show error to user instead of crashing&#10;            android.widget.Toast.makeText(requireContext(), &quot;Error loading My Reports&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    private fun setupRecyclerView() {&#10;        try {&#10;            recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;            recyclerView.setHasFixedSize(true)&#10;&#10;            // Set empty adapter initially to prevent crashes&#10;            recyclerView.adapter = ItemsAdapter(&#10;                items = mutableListOf(),&#10;                isLostItemsList = true,&#10;                currentUserId = currentUserId,&#10;                onItemClick = { },&#10;                onClaimButtonClick = { }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;MyReportsFragment&quot;, &quot;Error setting up RecyclerView: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupTabLayout() {&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;My Lost Items&quot;))&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;My Found Items&quot;))&#10;&#10;        tabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {&#10;            override fun onTabSelected(tab: TabLayout.Tab?) {&#10;                when (tab?.position) {&#10;                    0 -&gt; {&#10;                        displayingLostItems = true&#10;                        updateRecyclerView(myLostItems)&#10;                    }&#10;                    1 -&gt; {&#10;                        displayingLostItems = false&#10;                        updateRecyclerView(myFoundItems)&#10;                    }&#10;                }&#10;            }&#10;&#10;            override fun onTabUnselected(tab: TabLayout.Tab?) {}&#10;            override fun onTabReselected(tab: TabLayout.Tab?) {}&#10;        })&#10;    }&#10;&#10;    private fun setupSearch() {&#10;        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {&#10;            override fun onQueryTextSubmit(query: String?): Boolean {&#10;                filterItems(query)&#10;                return false&#10;            }&#10;&#10;            override fun onQueryTextChange(newText: String?): Boolean {&#10;                filterItems(newText)&#10;                return false&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun filterItems(query: String?) {&#10;        if (query.isNullOrBlank()) {&#10;            if (displayingLostItems) {&#10;                updateRecyclerView(myLostItems)&#10;            } else {&#10;                updateRecyclerView(myFoundItems)&#10;            }&#10;            return&#10;        }&#10;&#10;        if (displayingLostItems) {&#10;            val filteredList = myLostItems.filter { item -&gt;&#10;                item.name.contains(query, ignoreCase = true) ||&#10;                item.description.contains(query, ignoreCase = true) ||&#10;                item.category.contains(query, ignoreCase = true) ||&#10;                item.location.contains(query, ignoreCase = true)&#10;            }&#10;            updateRecyclerView(filteredList)&#10;        } else {&#10;            val filteredList = myFoundItems.filter { item -&gt;&#10;                item.name.contains(query, ignoreCase = true) ||&#10;                item.description.contains(query, ignoreCase = true) ||&#10;                item.category.contains(query, ignoreCase = true) ||&#10;                item.location.contains(query, ignoreCase = true)&#10;            }&#10;            updateRecyclerView(filteredList)&#10;        }&#10;    }&#10;&#10;    private fun loadMyItems() {&#10;        if (currentUserId.isEmpty()) {&#10;            showLoginRequiredDialog()&#10;            return&#10;        }&#10;&#10;        // Load lost items reported by current user&#10;        itemRepository.getLostItemsByUser(currentUserId).get()&#10;            .addOnSuccessListener { snapshot -&gt;&#10;                myLostItems = snapshot.toObjects(LostItem::class.java)&#10;                if (displayingLostItems) {&#10;                    updateRecyclerView(myLostItems)&#10;                }&#10;            }&#10;            .addOnFailureListener { exception -&gt;&#10;                showErrorDialog(&quot;Failed to load your lost items: ${exception.message}&quot;)&#10;            }&#10;&#10;        // Load found items reported by current user&#10;        itemRepository.getFoundItemsByUser(currentUserId).get()&#10;            .addOnSuccessListener { snapshot -&gt;&#10;                myFoundItems = snapshot.toObjects(FoundItem::class.java)&#10;                if (!displayingLostItems) {&#10;                    updateRecyclerView(myFoundItems)&#10;                }&#10;            }&#10;            .addOnFailureListener { exception -&gt;&#10;                showErrorDialog(&quot;Failed to load your found items: ${exception.message}&quot;)&#10;            }&#10;    }&#10;&#10;    private fun &lt;T : Item&gt; updateRecyclerView(items: List&lt;T&gt;) {&#10;        if (items.isEmpty()) {&#10;            recyclerView.visibility = View.GONE&#10;            noItemsTextView.visibility = View.VISIBLE&#10;            noItemsTextView.text = if (displayingLostItems) {&#10;                &quot;You haven't reported any lost items yet&quot;&#10;            } else {&#10;                &quot;You haven't reported any found items yet&quot;&#10;            }&#10;            return&#10;        }&#10;&#10;        recyclerView.visibility = View.VISIBLE&#10;        noItemsTextView.visibility = View.GONE&#10;&#10;        val adapter = ItemsAdapter(&#10;            items = items.toMutableList(),&#10;            isLostItemsList = displayingLostItems,&#10;            currentUserId = currentUserId,&#10;            onItemClick = { item -&gt;&#10;                showItemOptionsDialog(item)&#10;            }&#10;        )&#10;        recyclerView.adapter = adapter&#10;    }&#10;&#10;    private fun showItemOptionsDialog(item: Item) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Item Options&quot;)&#10;            .setItems(arrayOf(&quot;View Details&quot;, &quot;Edit&quot;, &quot;Delete&quot;)) { _, which -&gt;&#10;                when (which) {&#10;                    0 -&gt; showItemDetailsDialog(item)&#10;                    1 -&gt; editItem(item)&#10;                    2 -&gt; showDeleteConfirmationDialog(item)&#10;                }&#10;            }&#10;            .show()&#10;    }&#10;&#10;    private fun showItemDetailsDialog(item: Item) {&#10;        val message = when (item) {&#10;            is LostItem -&gt; &quot;&quot;&quot;&#10;                Name: ${item.name}&#10;                Category: ${item.category}&#10;                Location: ${item.location}&#10;                Description: ${item.description}&#10;                Date Lost: ${item.dateLost.toDate()}&#10;            &quot;&quot;&quot;.trimIndent()&#10;&#10;            is FoundItem -&gt; {&#10;                val claimStatus = if (item.claimed) {&#10;                    &quot;Claimed by: ${item.claimedByName}&quot;&#10;                } else {&#10;                    &quot;Not claimed&quot;&#10;                }&#10;&#10;                &quot;&quot;&quot;&#10;                Name: ${item.name}&#10;                Category: ${item.category}&#10;                Location: ${item.location}&#10;                Description: ${item.description}&#10;                Date Found: ${item.dateFound.toDate()}&#10;                Kept at: ${item.keptAt}&#10;                Status: $claimStatus&#10;                &quot;&quot;&quot;.trimIndent()&#10;            }&#10;&#10;            else -&gt; &quot;Item details unavailable&quot;&#10;        }&#10;&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Item Details&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;Close&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun editItem(item: Item) {&#10;        val intent = when (item) {&#10;            is LostItem -&gt; {&#10;                ReportItemActivity.createEditIntent(&#10;                    context = requireContext(),&#10;                    isLostItem = true,&#10;                    itemId = item.id&#10;                )&#10;            }&#10;            is FoundItem -&gt; {&#10;                ReportItemActivity.createEditIntent(&#10;                    context = requireContext(),&#10;                    isLostItem = false,&#10;                    itemId = item.id&#10;                )&#10;            }&#10;            else -&gt; null&#10;        }&#10;&#10;        intent?.let { startActivity(it) }&#10;    }&#10;&#10;    private fun showDeleteConfirmationDialog(item: Item) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Confirm Deletion&quot;)&#10;            .setMessage(&quot;Are you sure you want to delete this item report? This action cannot be undone.&quot;)&#10;            .setPositiveButton(&quot;Delete&quot;) { _, _ -&gt;&#10;                deleteItem(item)&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun deleteItem(item: Item) {&#10;        when (item) {&#10;            is LostItem -&gt; {&#10;                itemRepository.deleteLostItem(item.id, currentUserId)&#10;                    .addOnSuccessListener {&#10;                        showSuccessDialog(&quot;Item deleted successfully&quot;)&#10;                        loadMyItems()&#10;                    }&#10;                    .addOnFailureListener { exception -&gt;&#10;                        showErrorDialog(&quot;Failed to delete item: ${exception.message}&quot;)&#10;                    }&#10;            }&#10;            is FoundItem -&gt; {&#10;                itemRepository.deleteFoundItem(item.id, currentUserId)&#10;                    .addOnSuccessListener {&#10;                        showSuccessDialog(&quot;Item deleted successfully&quot;)&#10;                        loadMyItems()&#10;                    }&#10;                    .addOnFailureListener { exception -&gt;&#10;                        showErrorDialog(&quot;Failed to delete item: ${exception.message}&quot;)&#10;                    }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showLoginRequiredDialog() {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Login Required&quot;)&#10;            .setMessage(&quot;You must be logged in to view your reports.&quot;)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showSuccessDialog(message: String) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Success&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showErrorDialog(message: String) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Error&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        loadMyItems() // Refresh data when coming back to this fragment&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.campus_lost_found&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.appcompat.widget.SearchView&#10;import android.widget.TextView&#10;import androidx.fragment.app.Fragment&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.campus_lost_found.adapter.ItemsAdapter&#10;import com.example.campus_lost_found.model.FoundItem&#10;import com.example.campus_lost_found.model.Item&#10;import com.example.campus_lost_found.model.LostItem&#10;import com.example.campus_lost_found.repository.ItemRepository&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.android.material.tabs.TabLayout&#10;import com.google.firebase.auth.FirebaseAuth&#10;&#10;class MyReportsFragment : Fragment() {&#10;&#10;    private lateinit var recyclerView: RecyclerView&#10;    private lateinit var searchView: SearchView&#10;    private lateinit var tabLayout: TabLayout&#10;    private lateinit var noItemsTextView: TextView&#10;    private val itemRepository = ItemRepository()&#10;    private val currentUserId: String&#10;        get() = FirebaseAuth.getInstance().currentUser?.uid ?: &quot;&quot;&#10;&#10;    private var myLostItems = listOf&lt;LostItem&gt;()&#10;    private var myFoundItems = listOf&lt;FoundItem&gt;()&#10;    private var displayingLostItems = true&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.fragment_items_list, container, false)&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        try {&#10;            Log.d(&quot;MyReportsFragment&quot;, &quot;Starting onViewCreated&quot;)&#10;            &#10;            // Safe view initialization with null checks&#10;            recyclerView = view.findViewById(R.id.itemsRecyclerView) ?: throw IllegalStateException(&quot;RecyclerView not found&quot;)&#10;            searchView = view.findViewById(R.id.searchView) ?: throw IllegalStateException(&quot;SearchView not found&quot;)&#10;            &#10;            // TabLayout might not exist in fragment_items_list, so make it optional&#10;            tabLayout = view.findViewById(R.id.myReportsTabLayout) ?: let {&#10;                Log.w(&quot;MyReportsFragment&quot;, &quot;myReportsTabLayout not found, creating programmatically&quot;)&#10;                createTabLayoutProgrammatically(view)&#10;            }&#10;            &#10;            noItemsTextView = view.findViewById(R.id.empty_view) ?: throw IllegalStateException(&quot;Empty view not found&quot;)&#10;&#10;            setupRecyclerView()&#10;            setupTabLayout()&#10;            setupSearch()&#10;            loadMyItems()&#10;            &#10;            Log.d(&quot;MyReportsFragment&quot;, &quot;onViewCreated completed successfully&quot;)&#10;            &#10;        } catch (e: Exception) {&#10;            Log.e(&quot;MyReportsFragment&quot;, &quot;Error in onViewCreated: ${e.message}&quot;, e)&#10;            // Show error to user instead of crashing&#10;            android.widget.Toast.makeText(requireContext(), &quot;Loading My Reports...&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;            // Try to load without tabs&#10;            setupBasicView()&#10;        }&#10;    }&#10;&#10;    private fun createTabLayoutProgrammatically(parentView: View): TabLayout {&#10;        val tabLayout = TabLayout(requireContext())&#10;        tabLayout.id = View.generateViewId()&#10;        &#10;        // Add to the parent layout if possible&#10;        val parent = parentView as? ViewGroup&#10;        parent?.addView(tabLayout, 0) // Add at the top&#10;        &#10;        return tabLayout&#10;    }&#10;&#10;    private fun setupBasicView() {&#10;        try {&#10;            // Simple setup without tabs&#10;            recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;            recyclerView.adapter = ItemsAdapter(&#10;                items = mutableListOf(),&#10;                isLostItemsList = true,&#10;                currentUserId = currentUserId,&#10;                onItemClick = { },&#10;                onClaimButtonClick = { }&#10;            )&#10;            loadMyItems()&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;MyReportsFragment&quot;, &quot;Even basic setup failed: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupRecyclerView() {&#10;        try {&#10;            recyclerView.layoutManager = LinearLayoutManager(requireContext())&#10;            recyclerView.setHasFixedSize(true)&#10;&#10;            // Set empty adapter initially to prevent crashes&#10;            recyclerView.adapter = ItemsAdapter(&#10;                items = mutableListOf(),&#10;                isLostItemsList = true,&#10;                currentUserId = currentUserId,&#10;                onItemClick = { },&#10;                onClaimButtonClick = { }&#10;            )&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;MyReportsFragment&quot;, &quot;Error setting up RecyclerView: ${e.message}&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupTabLayout() {&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;My Lost Items&quot;))&#10;        tabLayout.addTab(tabLayout.newTab().setText(&quot;My Found Items&quot;))&#10;&#10;        tabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {&#10;            override fun onTabSelected(tab: TabLayout.Tab?) {&#10;                when (tab?.position) {&#10;                    0 -&gt; {&#10;                        displayingLostItems = true&#10;                        updateRecyclerView(myLostItems)&#10;                    }&#10;                    1 -&gt; {&#10;                        displayingLostItems = false&#10;                        updateRecyclerView(myFoundItems)&#10;                    }&#10;                }&#10;            }&#10;&#10;            override fun onTabUnselected(tab: TabLayout.Tab?) {}&#10;            override fun onTabReselected(tab: TabLayout.Tab?) {}&#10;        })&#10;    }&#10;&#10;    private fun setupSearch() {&#10;        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {&#10;            override fun onQueryTextSubmit(query: String?): Boolean {&#10;                filterItems(query)&#10;                return false&#10;            }&#10;&#10;            override fun onQueryTextChange(newText: String?): Boolean {&#10;                filterItems(newText)&#10;                return false&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun filterItems(query: String?) {&#10;        if (query.isNullOrBlank()) {&#10;            if (displayingLostItems) {&#10;                updateRecyclerView(myLostItems)&#10;            } else {&#10;                updateRecyclerView(myFoundItems)&#10;            }&#10;            return&#10;        }&#10;&#10;        if (displayingLostItems) {&#10;            val filteredList = myLostItems.filter { item -&gt;&#10;                item.name.contains(query, ignoreCase = true) ||&#10;                item.description.contains(query, ignoreCase = true) ||&#10;                item.category.contains(query, ignoreCase = true) ||&#10;                item.location.contains(query, ignoreCase = true)&#10;            }&#10;            updateRecyclerView(filteredList)&#10;        } else {&#10;            val filteredList = myFoundItems.filter { item -&gt;&#10;                item.name.contains(query, ignoreCase = true) ||&#10;                item.description.contains(query, ignoreCase = true) ||&#10;                item.category.contains(query, ignoreCase = true) ||&#10;                item.location.contains(query, ignoreCase = true)&#10;            }&#10;            updateRecyclerView(filteredList)&#10;        }&#10;    }&#10;&#10;    private fun loadMyItems() {&#10;        if (currentUserId.isEmpty()) {&#10;            showLoginRequiredDialog()&#10;            return&#10;        }&#10;&#10;        // Load lost items reported by current user&#10;        itemRepository.getLostItemsByUser(currentUserId).get()&#10;            .addOnSuccessListener { snapshot -&gt;&#10;                myLostItems = snapshot.toObjects(LostItem::class.java)&#10;                if (displayingLostItems) {&#10;                    updateRecyclerView(myLostItems)&#10;                }&#10;            }&#10;            .addOnFailureListener { exception -&gt;&#10;                showErrorDialog(&quot;Failed to load your lost items: ${exception.message}&quot;)&#10;            }&#10;&#10;        // Load found items reported by current user&#10;        itemRepository.getFoundItemsByUser(currentUserId).get()&#10;            .addOnSuccessListener { snapshot -&gt;&#10;                myFoundItems = snapshot.toObjects(FoundItem::class.java)&#10;                if (!displayingLostItems) {&#10;                    updateRecyclerView(myFoundItems)&#10;                }&#10;            }&#10;            .addOnFailureListener { exception -&gt;&#10;                showErrorDialog(&quot;Failed to load your found items: ${exception.message}&quot;)&#10;            }&#10;    }&#10;&#10;    private fun &lt;T : Item&gt; updateRecyclerView(items: List&lt;T&gt;) {&#10;        if (items.isEmpty()) {&#10;            recyclerView.visibility = View.GONE&#10;            noItemsTextView.visibility = View.VISIBLE&#10;            noItemsTextView.text = if (displayingLostItems) {&#10;                &quot;You haven't reported any lost items yet&quot;&#10;            } else {&#10;                &quot;You haven't reported any found items yet&quot;&#10;            }&#10;            return&#10;        }&#10;&#10;        recyclerView.visibility = View.VISIBLE&#10;        noItemsTextView.visibility = View.GONE&#10;&#10;        val adapter = ItemsAdapter(&#10;            items = items.toMutableList(),&#10;            isLostItemsList = displayingLostItems,&#10;            currentUserId = currentUserId,&#10;            onItemClick = { item -&gt;&#10;                showItemOptionsDialog(item)&#10;            }&#10;        )&#10;        recyclerView.adapter = adapter&#10;    }&#10;&#10;    private fun showItemOptionsDialog(item: Item) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Item Options&quot;)&#10;            .setItems(arrayOf(&quot;View Details&quot;, &quot;Edit&quot;, &quot;Delete&quot;)) { _, which -&gt;&#10;                when (which) {&#10;                    0 -&gt; showItemDetailsDialog(item)&#10;                    1 -&gt; editItem(item)&#10;                    2 -&gt; showDeleteConfirmationDialog(item)&#10;                }&#10;            }&#10;            .show()&#10;    }&#10;&#10;    private fun showItemDetailsDialog(item: Item) {&#10;        val message = when (item) {&#10;            is LostItem -&gt; &quot;&quot;&quot;&#10;                Name: ${item.name}&#10;                Category: ${item.category}&#10;                Location: ${item.location}&#10;                Description: ${item.description}&#10;                Date Lost: ${item.dateLost.toDate()}&#10;            &quot;&quot;&quot;.trimIndent()&#10;&#10;            is FoundItem -&gt; {&#10;                val claimStatus = if (item.claimed) {&#10;                    &quot;Claimed by: ${item.claimedByName}&quot;&#10;                } else {&#10;                    &quot;Not claimed&quot;&#10;                }&#10;&#10;                &quot;&quot;&quot;&#10;                Name: ${item.name}&#10;                Category: ${item.category}&#10;                Location: ${item.location}&#10;                Description: ${item.description}&#10;                Date Found: ${item.dateFound.toDate()}&#10;                Kept at: ${item.keptAt}&#10;                Status: $claimStatus&#10;                &quot;&quot;&quot;.trimIndent()&#10;            }&#10;&#10;            else -&gt; &quot;Item details unavailable&quot;&#10;        }&#10;&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Item Details&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;Close&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun editItem(item: Item) {&#10;        val intent = when (item) {&#10;            is LostItem -&gt; {&#10;                ReportItemActivity.createEditIntent(&#10;                    context = requireContext(),&#10;                    isLostItem = true,&#10;                    itemId = item.id&#10;                )&#10;            }&#10;            is FoundItem -&gt; {&#10;                ReportItemActivity.createEditIntent(&#10;                    context = requireContext(),&#10;                    isLostItem = false,&#10;                    itemId = item.id&#10;                )&#10;            }&#10;            else -&gt; null&#10;        }&#10;&#10;        intent?.let { startActivity(it) }&#10;    }&#10;&#10;    private fun showDeleteConfirmationDialog(item: Item) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Confirm Deletion&quot;)&#10;            .setMessage(&quot;Are you sure you want to delete this item report? This action cannot be undone.&quot;)&#10;            .setPositiveButton(&quot;Delete&quot;) { _, _ -&gt;&#10;                deleteItem(item)&#10;            }&#10;            .setNegativeButton(&quot;Cancel&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun deleteItem(item: Item) {&#10;        when (item) {&#10;            is LostItem -&gt; {&#10;                itemRepository.deleteLostItem(item.id, currentUserId)&#10;                    .addOnSuccessListener {&#10;                        showSuccessDialog(&quot;Item deleted successfully&quot;)&#10;                        loadMyItems()&#10;                    }&#10;                    .addOnFailureListener { exception -&gt;&#10;                        showErrorDialog(&quot;Failed to delete item: ${exception.message}&quot;)&#10;                    }&#10;            }&#10;            is FoundItem -&gt; {&#10;                itemRepository.deleteFoundItem(item.id, currentUserId)&#10;                    .addOnSuccessListener {&#10;                        showSuccessDialog(&quot;Item deleted successfully&quot;)&#10;                        loadMyItems()&#10;                    }&#10;                    .addOnFailureListener { exception -&gt;&#10;                        showErrorDialog(&quot;Failed to delete item: ${exception.message}&quot;)&#10;                    }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showLoginRequiredDialog() {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Login Required&quot;)&#10;            .setMessage(&quot;You must be logged in to view your reports.&quot;)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showSuccessDialog(message: String) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Success&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    private fun showErrorDialog(message: String) {&#10;        MaterialAlertDialogBuilder(requireContext())&#10;            .setTitle(&quot;Error&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        loadMyItems() // Refresh data when coming back to this fragment&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/ReportItemActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/ReportItemActivity.kt" />
              <option name="originalContent" value="package com.example.campus_lost_found&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import android.widget.*&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.bumptech.glide.Glide&#10;import com.example.campus_lost_found.model.FoundItem&#10;import com.example.campus_lost_found.model.LostItem&#10;import com.example.campus_lost_found.repository.ItemRepository&#10;import com.example.campus_lost_found.utils.SupabaseManager&#10;import com.google.android.material.datepicker.MaterialDatePicker&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class ReportItemActivity : AppCompatActivity() {&#10;&#10;    private lateinit var titleTextView: TextView&#10;    private lateinit var nameEditText: EditText&#10;    private lateinit var descriptionEditText: EditText&#10;    private lateinit var categorySpinner: Spinner&#10;    private lateinit var locationEditText: EditText&#10;    private lateinit var dateButton: Button&#10;    private lateinit var keptAtLayout: View&#10;    private lateinit var keptAtEditText: EditText&#10;    private lateinit var itemImageView: ImageView&#10;    private lateinit var uploadImageButton: Button&#10;    private lateinit var submitButton: Button&#10;&#10;    private val itemRepository = ItemRepository()&#10;    private val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;    private var isLostItem = true&#10;    private var selectedDate: Date = Date()&#10;    private var imageUri: Uri? = null&#10;    private var imageUrl: String = &quot;&quot;&#10;    private var editItemId: String? = null&#10;    private var editingExistingItem = false&#10;&#10;    private val currentUserId: String&#10;        get() = FirebaseAuth.getInstance().currentUser?.uid ?: &quot;&quot;&#10;    private val currentUserName: String&#10;        get() = FirebaseAuth.getInstance().currentUser?.displayName ?: &quot;Anonymous User&quot;&#10;&#10;    private val getContent = registerForActivityResult(ActivityResultContracts.GetContent()) { uri -&gt;&#10;        uri?.let {&#10;            imageUri = it&#10;            Glide.with(this)&#10;                .load(uri)&#10;                .centerCrop()&#10;                .into(itemImageView)&#10;            itemImageView.visibility = View.VISIBLE&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_report_item)&#10;&#10;        // Get intent data&#10;        isLostItem = intent.getBooleanExtra(&quot;isLostItem&quot;, true)&#10;        editItemId = intent.getStringExtra(&quot;itemId&quot;)&#10;        editingExistingItem = editItemId != null&#10;&#10;        // Initialize views&#10;        initViews()&#10;        setupUI()&#10;&#10;        // Load item data if editing&#10;        if (editingExistingItem) {&#10;            loadItemData()&#10;        }&#10;    }&#10;&#10;    private fun initViews() {&#10;        titleTextView = findViewById(R.id.reportTitleTextView)&#10;        nameEditText = findViewById(R.id.itemNameEditText)&#10;        descriptionEditText = findViewById(R.id.itemDescriptionEditText)&#10;        categorySpinner = findViewById(R.id.categorySpinner)&#10;        locationEditText = findViewById(R.id.locationEditText)&#10;        dateButton = findViewById(R.id.dateButton)&#10;        keptAtLayout = findViewById(R.id.keptAtLayout)&#10;        keptAtEditText = findViewById(R.id.keptAtEditText)&#10;        itemImageView = findViewById(R.id.itemImageView)&#10;        uploadImageButton = findViewById(R.id.uploadImageButton)&#10;        submitButton = findViewById(R.id.submitButton)&#10;    }&#10;&#10;    private fun setupUI() {&#10;        // Set title based on mode&#10;        val titleText = if (editingExistingItem) {&#10;            if (isLostItem) &quot;Edit Lost Item&quot; else &quot;Edit Found Item&quot;&#10;        } else {&#10;            if (isLostItem) &quot;Report Lost Item&quot; else &quot;Report Found Item&quot;&#10;        }&#10;        titleTextView.text = titleText&#10;        submitButton.text = if (editingExistingItem) &quot;Update&quot; else &quot;Submit&quot;&#10;&#10;        // Setup category spinner&#10;        val categories = arrayOf(&#10;            &quot;Electronics&quot;, &quot;Books &amp; Stationery&quot;, &quot;ID Cards &amp; Documents&quot;,&#10;            &quot;Keys&quot;, &quot;Clothing&quot;, &quot;Accessories&quot;, &quot;Wallet/Purse&quot;, &quot;Other&quot;&#10;        )&#10;        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, categories)&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        categorySpinner.adapter = adapter&#10;&#10;        // Show/hide kept at field based on item type&#10;        keptAtLayout.visibility = if (isLostItem) View.GONE else View.VISIBLE&#10;&#10;        // Date button setup&#10;        updateDateButtonText()&#10;        dateButton.setOnClickListener {&#10;            showDatePicker()&#10;        }&#10;&#10;        // Image upload button&#10;        uploadImageButton.setOnClickListener {&#10;            getContent.launch(&quot;image/*&quot;)&#10;        }&#10;&#10;        // Submit button&#10;        submitButton.setOnClickListener {&#10;            if (validateInputs()) {&#10;                if (imageUri != null &amp;&amp; imageUrl.isEmpty()) {&#10;                    uploadImageAndSaveItem()&#10;                } else {&#10;                    saveItem()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadItemData() {&#10;        if (editItemId.isNullOrEmpty()) return&#10;&#10;        if (isLostItem) {&#10;            itemRepository.getLostItem(editItemId!!).addOnSuccessListener { document -&gt;&#10;                val lostItem = document.toObject(LostItem::class.java) ?: return@addOnSuccessListener&#10;&#10;                nameEditText.setText(lostItem.name)&#10;                descriptionEditText.setText(lostItem.description)&#10;                setCategorySpinnerSelection(lostItem.category)&#10;                locationEditText.setText(lostItem.location)&#10;                selectedDate = lostItem.dateLost.toDate()&#10;                updateDateButtonText()&#10;&#10;                if (lostItem.imageUrl.isNotEmpty()) {&#10;                    imageUrl = lostItem.imageUrl&#10;                    Glide.with(this)&#10;                        .load(imageUrl)&#10;                        .centerCrop()&#10;                        .into(itemImageView)&#10;                    itemImageView.visibility = View.VISIBLE&#10;                }&#10;            }.addOnFailureListener { e -&gt;&#10;                showErrorDialog(&quot;Failed to load item: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            itemRepository.getFoundItem(editItemId!!).addOnSuccessListener { document -&gt;&#10;                val foundItem = document.toObject(FoundItem::class.java) ?: return@addOnSuccessListener&#10;&#10;                nameEditText.setText(foundItem.name)&#10;                descriptionEditText.setText(foundItem.description)&#10;                setCategorySpinnerSelection(foundItem.category)&#10;                locationEditText.setText(foundItem.location)&#10;                keptAtEditText.setText(foundItem.keptAt)&#10;                selectedDate = foundItem.dateFound.toDate()&#10;                updateDateButtonText()&#10;&#10;                if (foundItem.imageUrl.isNotEmpty()) {&#10;                    imageUrl = foundItem.imageUrl&#10;                    Glide.with(this)&#10;                        .load(imageUrl)&#10;                        .centerCrop()&#10;                        .into(itemImageView)&#10;                    itemImageView.visibility = View.VISIBLE&#10;                }&#10;            }.addOnFailureListener { e -&gt;&#10;                showErrorDialog(&quot;Failed to load item: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setCategorySpinnerSelection(category: String) {&#10;        val adapter = categorySpinner.adapter as ArrayAdapter&lt;String&gt;&#10;        for (i in 0 until adapter.count) {&#10;            if (adapter.getItem(i) == category) {&#10;                categorySpinner.setSelection(i)&#10;                break&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun updateDateButtonText() {&#10;        val dateText = if (isLostItem) {&#10;            &quot;Date Lost: ${dateFormat.format(selectedDate)}&quot;&#10;        } else {&#10;            &quot;Date Found: ${dateFormat.format(selectedDate)}&quot;&#10;        }&#10;        dateButton.text = dateText&#10;    }&#10;&#10;    private fun showDatePicker() {&#10;        val datePicker = MaterialDatePicker.Builder.datePicker()&#10;            .setTitleText(if (isLostItem) &quot;Select Lost Date&quot; else &quot;Select Found Date&quot;)&#10;            .setSelection(selectedDate.time)&#10;            .build()&#10;&#10;        datePicker.addOnPositiveButtonClickListener { selection -&gt;&#10;            selectedDate = Date(selection)&#10;            updateDateButtonText()&#10;        }&#10;&#10;        datePicker.show(supportFragmentManager, &quot;DATE_PICKER&quot;)&#10;    }&#10;&#10;    private fun validateInputs(): Boolean {&#10;        if (nameEditText.text.isBlank()) {&#10;            showErrorDialog(&quot;Please enter the item name&quot;)&#10;            return false&#10;        }&#10;&#10;        if (locationEditText.text.isBlank()) {&#10;            showErrorDialog(&quot;Please enter the location&quot;)&#10;            return false&#10;        }&#10;&#10;        if (!isLostItem &amp;&amp; keptAtEditText.text.isBlank()) {&#10;            showErrorDialog(&quot;Please enter where the item is kept&quot;)&#10;            return false&#10;        }&#10;&#10;        if (currentUserId.isEmpty()) {&#10;            showErrorDialog(&quot;You must be signed in to report items&quot;)&#10;            return false&#10;        }&#10;&#10;        return true&#10;    }&#10;&#10;    // Supabase image upload (replaces Firebase Storage)&#10;    private fun uploadImageAndSaveItem() {&#10;        imageUri?.let { uri -&gt;&#10;            // Show loading state&#10;            submitButton.isEnabled = false&#10;            submitButton.text = &quot;Uploading...&quot;&#10;            Toast.makeText(this, &quot;Uploading image to Supabase...&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;            lifecycleScope.launch {&#10;                try {&#10;                    val result = SupabaseManager.getInstance().uploadImage(&#10;                        context = this@ReportItemActivity,&#10;                        imageUri = uri,&#10;                        userId = currentUserId&#10;                    )&#10;&#10;                    result.onSuccess { url -&gt;&#10;                        imageUrl = url&#10;                        runOnUiThread {&#10;                            Toast.makeText(this@ReportItemActivity, &quot;Image uploaded successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                            saveItem()&#10;                        }&#10;                    }.onFailure { exception -&gt;&#10;                        runOnUiThread {&#10;                            Log.e(&quot;ReportItem&quot;, &quot;Supabase upload failed: ${exception.message}&quot;)&#10;                            showErrorDialog(&quot;Failed to upload image: ${exception.message}&quot;)&#10;                            // Reset button state&#10;                            submitButton.isEnabled = true&#10;                            submitButton.text = if (editingExistingItem) &quot;Update&quot; else &quot;Submit&quot;&#10;                        }&#10;                    }&#10;                } catch (e: Exception) {&#10;                    runOnUiThread {&#10;                        Log.e(&quot;ReportItem&quot;, &quot;Error during Supabase upload: ${e.message}&quot;)&#10;                        showErrorDialog(&quot;Error uploading image: ${e.message}&quot;)&#10;                        // Reset button state&#10;                        submitButton.isEnabled = true&#10;                        submitButton.text = if (editingExistingItem) &quot;Update&quot; else &quot;Submit&quot;&#10;                    }&#10;                }&#10;            }&#10;        } ?: run {&#10;            // No image selected, just save the item&#10;            saveItem()&#10;        }&#10;    }&#10;&#10;    private fun saveItem() {&#10;        val name = nameEditText.text.toString().trim()&#10;        val description = descriptionEditText.text.toString().trim()&#10;        val category = categorySpinner.selectedItem.toString()&#10;        val location = locationEditText.text.toString().trim()&#10;&#10;        if (isLostItem) {&#10;            val lostItem = LostItem(&#10;                id = editItemId ?: &quot;&quot;,&#10;                name = name,&#10;                description = description,&#10;                category = category,&#10;                location = location,&#10;                imageUrl = imageUrl,&#10;                reportedBy = currentUserId,&#10;                reportedByName = currentUserName,&#10;                reportedDate = Timestamp.now(),&#10;                dateLost = Timestamp(selectedDate)&#10;            )&#10;&#10;            val task = if (editingExistingItem) {&#10;                itemRepository.updateLostItem(lostItem)&#10;            } else {&#10;                itemRepository.addLostItem(lostItem)&#10;            }&#10;&#10;            task.addOnSuccessListener {&#10;                showSuccessDialog(if (editingExistingItem) &quot;Item updated successfully&quot; else &quot;Item reported successfully&quot;)&#10;            }.addOnFailureListener { e -&gt;&#10;                showErrorDialog(&quot;Failed to save item: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            val keptAt = keptAtEditText.text.toString().trim()&#10;&#10;            val foundItem = FoundItem(&#10;                id = editItemId ?: &quot;&quot;,&#10;                name = name,&#10;                description = description,&#10;                category = category,&#10;                location = location,&#10;                imageUrl = imageUrl,&#10;                reportedBy = currentUserId,&#10;                reportedByName = currentUserName,&#10;                reportedDate = Timestamp.now(),&#10;                keptAt = keptAt,&#10;                claimed = false,&#10;                claimedBy = &quot;&quot;,&#10;                claimedByName = &quot;&quot;,&#10;                dateFound = Timestamp(selectedDate)&#10;            )&#10;&#10;            val task = if (editingExistingItem) {&#10;                itemRepository.updateFoundItem(foundItem)&#10;            } else {&#10;                itemRepository.addFoundItem(foundItem)&#10;            }&#10;&#10;            task.addOnSuccessListener {&#10;                showSuccessDialog(if (editingExistingItem) &quot;Item updated successfully&quot; else &quot;Item reported successfully&quot;)&#10;            }.addOnFailureListener { e -&gt;&#10;                showErrorDialog(&quot;Failed to save item: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showSuccessDialog(message: String) {&#10;        MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Success&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;OK&quot;) { _, _ -&gt;&#10;                setResult(Activity.RESULT_OK)&#10;                finish()&#10;            }&#10;            .setCancelable(false)&#10;            .show()&#10;    }&#10;&#10;    private fun showErrorDialog(message: String) {&#10;        MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Error&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    companion object {&#10;        fun createEditIntent(context: Context, isLostItem: Boolean, itemId: String): Intent {&#10;            return Intent(context, ReportItemActivity::class.java).apply {&#10;                putExtra(&quot;isLostItem&quot;, isLostItem)&#10;                putExtra(&quot;itemId&quot;, itemId)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.campus_lost_found&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.View&#10;import android.widget.*&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import com.bumptech.glide.Glide&#10;import com.example.campus_lost_found.model.FoundItem&#10;import com.example.campus_lost_found.model.LostItem&#10;import com.example.campus_lost_found.repository.ItemRepository&#10;import com.example.campus_lost_found.utils.SupabaseManager&#10;import com.google.android.material.datepicker.MaterialDatePicker&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.firebase.Timestamp&#10;import com.google.firebase.auth.FirebaseAuth&#10;import kotlinx.coroutines.launch&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class ReportItemActivity : AppCompatActivity() {&#10;&#10;    private lateinit var titleTextView: TextView&#10;    private lateinit var nameEditText: EditText&#10;    private lateinit var descriptionEditText: EditText&#10;    private lateinit var categorySpinner: Spinner&#10;    private lateinit var locationEditText: EditText&#10;    private lateinit var dateButton: Button&#10;    private lateinit var keptAtLayout: View&#10;    private lateinit var keptAtEditText: EditText&#10;    private lateinit var itemImageView: ImageView&#10;    private lateinit var uploadImageButton: Button&#10;    private lateinit var submitButton: Button&#10;&#10;    private val itemRepository = ItemRepository()&#10;    private val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;    private var isLostItem = true&#10;    private var selectedDate: Date = Date()&#10;    private var imageUri: Uri? = null&#10;    private var imageUrl: String = &quot;&quot;&#10;    private var editItemId: String? = null&#10;    private var editingExistingItem = false&#10;&#10;    private val currentUserId: String&#10;        get() = FirebaseAuth.getInstance().currentUser?.uid ?: &quot;&quot;&#10;    private val currentUserName: String&#10;        get() = FirebaseAuth.getInstance().currentUser?.displayName ?: &quot;Anonymous User&quot;&#10;&#10;    private val getContent = registerForActivityResult(ActivityResultContracts.GetContent()) { uri -&gt;&#10;        uri?.let {&#10;            imageUri = it&#10;            Glide.with(this)&#10;                .load(uri)&#10;                .centerCrop()&#10;                .into(itemImageView)&#10;            itemImageView.visibility = View.VISIBLE&#10;        }&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_report_item)&#10;&#10;        // Get intent data&#10;        isLostItem = intent.getBooleanExtra(&quot;isLostItem&quot;, true)&#10;        editItemId = intent.getStringExtra(&quot;itemId&quot;)&#10;        editingExistingItem = editItemId != null&#10;&#10;        // Initialize views&#10;        initViews()&#10;        setupUI()&#10;&#10;        // Load item data if editing&#10;        if (editingExistingItem) {&#10;            loadItemData()&#10;        }&#10;    }&#10;&#10;    private fun initViews() {&#10;        titleTextView = findViewById(R.id.reportTitleTextView)&#10;        nameEditText = findViewById(R.id.itemNameEditText)&#10;        descriptionEditText = findViewById(R.id.itemDescriptionEditText)&#10;        categorySpinner = findViewById(R.id.categorySpinner)&#10;        locationEditText = findViewById(R.id.locationEditText)&#10;        dateButton = findViewById(R.id.dateButton)&#10;        keptAtLayout = findViewById(R.id.keptAtLayout)&#10;        keptAtEditText = findViewById(R.id.keptAtEditText)&#10;        itemImageView = findViewById(R.id.itemImageView)&#10;        uploadImageButton = findViewById(R.id.uploadImageButton)&#10;        submitButton = findViewById(R.id.submitButton)&#10;    }&#10;&#10;    private fun setupUI() {&#10;        // Set title based on mode&#10;        val titleText = if (editingExistingItem) {&#10;            if (isLostItem) &quot;Edit Lost Item&quot; else &quot;Edit Found Item&quot;&#10;        } else {&#10;            if (isLostItem) &quot;Report Lost Item&quot; else &quot;Report Found Item&quot;&#10;        }&#10;        titleTextView.text = titleText&#10;        submitButton.text = if (editingExistingItem) &quot;Update&quot; else &quot;Submit&quot;&#10;&#10;        // Setup category spinner&#10;        val categories = arrayOf(&#10;            &quot;Electronics&quot;, &quot;Books &amp; Stationery&quot;, &quot;ID Cards &amp; Documents&quot;,&#10;            &quot;Keys&quot;, &quot;Clothing&quot;, &quot;Accessories&quot;, &quot;Wallet/Purse&quot;, &quot;Other&quot;&#10;        )&#10;        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, categories)&#10;        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        categorySpinner.adapter = adapter&#10;&#10;        // Show/hide kept at field based on item type&#10;        keptAtLayout.visibility = if (isLostItem) View.GONE else View.VISIBLE&#10;&#10;        // Date button setup&#10;        updateDateButtonText()&#10;        dateButton.setOnClickListener {&#10;            showDatePicker()&#10;        }&#10;&#10;        // Image upload button&#10;        uploadImageButton.setOnClickListener {&#10;            getContent.launch(&quot;image/*&quot;)&#10;        }&#10;&#10;        // Submit button&#10;        submitButton.setOnClickListener {&#10;            if (validateInputs()) {&#10;                if (imageUri != null &amp;&amp; imageUrl.isEmpty()) {&#10;                    uploadImageAndSaveItem()&#10;                } else {&#10;                    saveItem()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadItemData() {&#10;        if (editItemId.isNullOrEmpty()) return&#10;&#10;        if (isLostItem) {&#10;            itemRepository.getLostItem(editItemId!!).addOnSuccessListener { document -&gt;&#10;                val lostItem = document.toObject(LostItem::class.java) ?: return@addOnSuccessListener&#10;&#10;                nameEditText.setText(lostItem.name)&#10;                descriptionEditText.setText(lostItem.description)&#10;                setCategorySpinnerSelection(lostItem.category)&#10;                locationEditText.setText(lostItem.location)&#10;                selectedDate = lostItem.dateLost.toDate()&#10;                updateDateButtonText()&#10;&#10;                if (lostItem.imageUrl.isNotEmpty()) {&#10;                    imageUrl = lostItem.imageUrl&#10;                    Glide.with(this)&#10;                        .load(imageUrl)&#10;                        .centerCrop()&#10;                        .into(itemImageView)&#10;                    itemImageView.visibility = View.VISIBLE&#10;                }&#10;            }.addOnFailureListener { e -&gt;&#10;                showErrorDialog(&quot;Failed to load item: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            itemRepository.getFoundItem(editItemId!!).addOnSuccessListener { document -&gt;&#10;                val foundItem = document.toObject(FoundItem::class.java) ?: return@addOnSuccessListener&#10;&#10;                nameEditText.setText(foundItem.name)&#10;                descriptionEditText.setText(foundItem.description)&#10;                setCategorySpinnerSelection(foundItem.category)&#10;                locationEditText.setText(foundItem.location)&#10;                keptAtEditText.setText(foundItem.keptAt)&#10;                selectedDate = foundItem.dateFound.toDate()&#10;                updateDateButtonText()&#10;&#10;                if (foundItem.imageUrl.isNotEmpty()) {&#10;                    imageUrl = foundItem.imageUrl&#10;                    Glide.with(this)&#10;                        .load(imageUrl)&#10;                        .centerCrop()&#10;                        .into(itemImageView)&#10;                    itemImageView.visibility = View.VISIBLE&#10;                }&#10;            }.addOnFailureListener { e -&gt;&#10;                showErrorDialog(&quot;Failed to load item: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setCategorySpinnerSelection(category: String) {&#10;        val adapter = categorySpinner.adapter as? ArrayAdapter&lt;String&gt;&#10;        adapter?.let {&#10;            for (i in 0 until it.count) {&#10;                if (it.getItem(i) == category) {&#10;                    categorySpinner.setSelection(i)&#10;                    break&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun updateDateButtonText() {&#10;        val dateText = if (isLostItem) {&#10;            &quot;Date Lost: ${dateFormat.format(selectedDate)}&quot;&#10;        } else {&#10;            &quot;Date Found: ${dateFormat.format(selectedDate)}&quot;&#10;        }&#10;        dateButton.text = dateText&#10;    }&#10;&#10;    private fun showDatePicker() {&#10;        val datePicker = MaterialDatePicker.Builder.datePicker()&#10;            .setTitleText(if (isLostItem) &quot;Select Lost Date&quot; else &quot;Select Found Date&quot;)&#10;            .setSelection(selectedDate.time)&#10;            .build()&#10;&#10;        datePicker.addOnPositiveButtonClickListener { selection -&gt;&#10;            selectedDate = Date(selection)&#10;            updateDateButtonText()&#10;        }&#10;&#10;        datePicker.show(supportFragmentManager, &quot;DATE_PICKER&quot;)&#10;    }&#10;&#10;    private fun validateInputs(): Boolean {&#10;        if (nameEditText.text.isBlank()) {&#10;            showErrorDialog(&quot;Please enter the item name&quot;)&#10;            return false&#10;        }&#10;&#10;        if (locationEditText.text.isBlank()) {&#10;            showErrorDialog(&quot;Please enter the location&quot;)&#10;            return false&#10;        }&#10;&#10;        if (!isLostItem &amp;&amp; keptAtEditText.text.isBlank()) {&#10;            showErrorDialog(&quot;Please enter where the item is kept&quot;)&#10;            return false&#10;        }&#10;&#10;        if (currentUserId.isEmpty()) {&#10;            showErrorDialog(&quot;You must be signed in to report items&quot;)&#10;            return false&#10;        }&#10;&#10;        return true&#10;    }&#10;&#10;    // Supabase image upload (replaces Firebase Storage)&#10;    private fun uploadImageAndSaveItem() {&#10;        imageUri?.let { uri -&gt;&#10;            // Show loading state&#10;            submitButton.isEnabled = false&#10;            submitButton.text = &quot;Uploading...&quot;&#10;            Toast.makeText(this, &quot;Uploading image to Supabase...&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;            lifecycleScope.launch {&#10;                try {&#10;                    val result = SupabaseManager.getInstance().uploadImage(&#10;                        context = this@ReportItemActivity,&#10;                        imageUri = uri,&#10;                        userId = currentUserId&#10;                    )&#10;&#10;                    result.onSuccess { url -&gt;&#10;                        imageUrl = url&#10;                        runOnUiThread {&#10;                            Toast.makeText(this@ReportItemActivity, &quot;Image uploaded successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                            saveItem()&#10;                        }&#10;                    }.onFailure { exception -&gt;&#10;                        runOnUiThread {&#10;                            Log.e(&quot;ReportItem&quot;, &quot;Supabase upload failed: ${exception.message}&quot;)&#10;                            showErrorDialog(&quot;Failed to upload image: ${exception.message}&quot;)&#10;                            // Reset button state&#10;                            submitButton.isEnabled = true&#10;                            submitButton.text = if (editingExistingItem) &quot;Update&quot; else &quot;Submit&quot;&#10;                        }&#10;                    }&#10;                } catch (e: Exception) {&#10;                    runOnUiThread {&#10;                        Log.e(&quot;ReportItem&quot;, &quot;Error during Supabase upload: ${e.message}&quot;)&#10;                        showErrorDialog(&quot;Error uploading image: ${e.message}&quot;)&#10;                        // Reset button state&#10;                        submitButton.isEnabled = true&#10;                        submitButton.text = if (editingExistingItem) &quot;Update&quot; else &quot;Submit&quot;&#10;                    }&#10;                }&#10;            }&#10;        } ?: run {&#10;            // No image selected, just save the item&#10;            saveItem()&#10;        }&#10;    }&#10;&#10;    private fun saveItem() {&#10;        val name = nameEditText.text.toString().trim()&#10;        val description = descriptionEditText.text.toString().trim()&#10;        val category = categorySpinner.selectedItem.toString()&#10;        val location = locationEditText.text.toString().trim()&#10;&#10;        if (isLostItem) {&#10;            val lostItem = LostItem(&#10;                id = editItemId ?: &quot;&quot;,&#10;                name = name,&#10;                description = description,&#10;                category = category,&#10;                location = location,&#10;                imageUrl = imageUrl,&#10;                reportedBy = currentUserId,&#10;                reportedByName = currentUserName,&#10;                reportedDate = Timestamp.now(),&#10;                dateLost = Timestamp(selectedDate)&#10;            )&#10;&#10;            val task = if (editingExistingItem) {&#10;                itemRepository.updateLostItem(lostItem)&#10;            } else {&#10;                itemRepository.addLostItem(lostItem)&#10;            }&#10;&#10;            task.addOnSuccessListener {&#10;                showSuccessDialog(if (editingExistingItem) &quot;Item updated successfully&quot; else &quot;Item reported successfully&quot;)&#10;            }.addOnFailureListener { e -&gt;&#10;                showErrorDialog(&quot;Failed to save item: ${e.message}&quot;)&#10;            }&#10;        } else {&#10;            val keptAt = keptAtEditText.text.toString().trim()&#10;&#10;            val foundItem = FoundItem(&#10;                id = editItemId ?: &quot;&quot;,&#10;                name = name,&#10;                description = description,&#10;                category = category,&#10;                location = location,&#10;                imageUrl = imageUrl,&#10;                reportedBy = currentUserId,&#10;                reportedByName = currentUserName,&#10;                reportedDate = Timestamp.now(),&#10;                keptAt = keptAt,&#10;                claimed = false,&#10;                claimedBy = &quot;&quot;,&#10;                claimedByName = &quot;&quot;,&#10;                dateFound = Timestamp(selectedDate)&#10;            )&#10;&#10;            val task = if (editingExistingItem) {&#10;                itemRepository.updateFoundItem(foundItem)&#10;            } else {&#10;                itemRepository.addFoundItem(foundItem)&#10;            }&#10;&#10;            task.addOnSuccessListener {&#10;                showSuccessDialog(if (editingExistingItem) &quot;Item updated successfully&quot; else &quot;Item reported successfully&quot;)&#10;            }.addOnFailureListener { e -&gt;&#10;                showErrorDialog(&quot;Failed to save item: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun showSuccessDialog(message: String) {&#10;        MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Success&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;OK&quot;) { _, _ -&gt;&#10;                setResult(Activity.RESULT_OK)&#10;                finish()&#10;            }&#10;            .setCancelable(false)&#10;            .show()&#10;    }&#10;&#10;    private fun showErrorDialog(message: String) {&#10;        MaterialAlertDialogBuilder(this)&#10;            .setTitle(&quot;Error&quot;)&#10;            .setMessage(message)&#10;            .setPositiveButton(&quot;OK&quot;, null)&#10;            .show()&#10;    }&#10;&#10;    companion object {&#10;        fun createEditIntent(context: Context, isLostItem: Boolean, itemId: String): Intent {&#10;            return Intent(context, ReportItemActivity::class.java).apply {&#10;                putExtra(&quot;isLostItem&quot;, isLostItem)&#10;                putExtra(&quot;itemId&quot;, itemId)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/adapter/ItemsAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/adapter/ItemsAdapter.kt" />
              <option name="originalContent" value="package com.example.campus_lost_found.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.bumptech.glide.Glide&#10;import com.example.campus_lost_found.R&#10;import com.example.campus_lost_found.model.FoundItem&#10;import com.example.campus_lost_found.model.Item&#10;import com.example.campus_lost_found.model.LostItem&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;class ItemsAdapter(&#10;    private var items: MutableList&lt;Item&gt; = mutableListOf(),&#10;    private val isLostItemsList: Boolean,&#10;    private val currentUserId: String,&#10;    private val onClaimButtonClick: ((Item) -&gt; Unit)? = null,&#10;    private val onItemClick: ((Item) -&gt; Unit)? = null&#10;) : RecyclerView.Adapter&lt;ItemsAdapter.ItemViewHolder&gt;() {&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_card, parent, false)&#10;        return ItemViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {&#10;        val item = items[position]&#10;        holder.bind(item, isLostItemsList, currentUserId, onClaimButtonClick, onItemClick)&#10;    }&#10;&#10;    override fun getItemCount() = items.size&#10;&#10;    // Method to update the items list efficiently&#10;    fun updateItems(newItems: List&lt;Item&gt;) {&#10;        val diffCallback = ItemDiffCallback(items, newItems)&#10;        val diffResult = DiffUtil.calculateDiff(diffCallback)&#10;&#10;        items.clear()&#10;        items.addAll(newItems)&#10;        diffResult.dispatchUpdatesTo(this)&#10;    }&#10;&#10;    // DiffUtil callback for efficient list updates&#10;    private class ItemDiffCallback(&#10;        private val oldList: List&lt;Item&gt;,&#10;        private val newList: List&lt;Item&gt;&#10;    ) : DiffUtil.Callback() {&#10;&#10;        override fun getOldListSize(): Int = oldList.size&#10;&#10;        override fun getNewListSize(): Int = newList.size&#10;&#10;        override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {&#10;            return oldList[oldItemPosition].id == newList[newItemPosition].id&#10;        }&#10;&#10;        override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {&#10;            return oldList[oldItemPosition] == newList[newItemPosition]&#10;        }&#10;    }&#10;&#10;    class ItemViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val itemImage: ImageView = itemView.findViewById(R.id.itemImage)&#10;        private val itemName: TextView = itemView.findViewById(R.id.itemName)&#10;        private val itemDescription: TextView = itemView.findViewById(R.id.itemDescription)&#10;        private val itemCategory: TextView = itemView.findViewById(R.id.itemCategory)&#10;        private val itemLocation: TextView = itemView.findViewById(R.id.itemLocation)&#10;        private val itemDate: TextView = itemView.findViewById(R.id.itemDate)&#10;        private val claimButton: Button = itemView.findViewById(R.id.claimButton)&#10;&#10;        fun bind(&#10;            item: Item,&#10;            isLostItemsList: Boolean,&#10;            currentUserId: String,&#10;            onClaimButtonClick: ((Item) -&gt; Unit)?,&#10;            onItemClick: ((Item) -&gt; Unit)?&#10;        ) {&#10;            itemName.text = item.name&#10;            itemDescription.text = item.description&#10;            itemCategory.text = item.category&#10;&#10;            // Format date&#10;            val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;            when (item) {&#10;                is LostItem -&gt; {&#10;                    itemLocation.text = itemView.context.getString(R.string.lost_at, item.location)&#10;                    itemDate.text = itemView.context.getString(R.string.lost_on, dateFormat.format(item.date))&#10;                }&#10;                is FoundItem -&gt; {&#10;                    itemLocation.text = itemView.context.getString(R.string.found_at, item.location)&#10;                    itemDate.text = itemView.context.getString(R.string.found_on, dateFormat.format(item.date))&#10;                }&#10;            }&#10;&#10;            // Load image with Glide&#10;            if (!item.imageUrl.isNullOrEmpty()) {&#10;                Glide.with(itemView.context)&#10;                    .load(item.imageUrl)&#10;                    .placeholder(R.drawable.ic_placeholder)&#10;                    .error(R.drawable.ic_error)&#10;                    .into(itemImage)&#10;            } else {&#10;                itemImage.setImageResource(R.drawable.ic_placeholder)&#10;            }&#10;&#10;            // Set up claim button&#10;            if (item.userId == currentUserId) {&#10;                claimButton.visibility = View.GONE&#10;            } else {&#10;                claimButton.visibility = View.VISIBLE&#10;                claimButton.text = if (isLostItemsList) {&#10;                    itemView.context.getString(R.string.i_found_this)&#10;                } else {&#10;                    itemView.context.getString(R.string.this_is_mine)&#10;                }&#10;                claimButton.setOnClickListener {&#10;                    onClaimButtonClick?.invoke(item)&#10;                }&#10;            }&#10;&#10;            // Set up item click&#10;            itemView.setOnClickListener {&#10;                onItemClick?.invoke(item)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.campus_lost_found.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.DiffUtil&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.bumptech.glide.Glide&#10;import com.example.campus_lost_found.R&#10;import com.example.campus_lost_found.model.FoundItem&#10;import com.example.campus_lost_found.model.Item&#10;import com.example.campus_lost_found.model.LostItem&#10;import java.text.SimpleDateFormat&#10;import java.util.Locale&#10;&#10;class ItemsAdapter(&#10;    private var items: MutableList&lt;Item&gt; = mutableListOf(),&#10;    private val isLostItemsList: Boolean,&#10;    private val currentUserId: String,&#10;    private val onClaimButtonClick: ((Item) -&gt; Unit)? = null,&#10;    private val onItemClick: ((Item) -&gt; Unit)? = null&#10;) : RecyclerView.Adapter&lt;ItemsAdapter.ItemViewHolder&gt;() {&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemViewHolder {&#10;        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_card, parent, false)&#10;        return ItemViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {&#10;        val item = items[position]&#10;        holder.bind(item, isLostItemsList, currentUserId, onClaimButtonClick, onItemClick)&#10;    }&#10;&#10;    override fun getItemCount() = items.size&#10;&#10;    // Method to update the items list efficiently&#10;    fun updateItems(newItems: List&lt;Item&gt;) {&#10;        val diffCallback = ItemDiffCallback(items, newItems)&#10;        val diffResult = DiffUtil.calculateDiff(diffCallback)&#10;&#10;        items.clear()&#10;        items.addAll(newItems)&#10;        diffResult.dispatchUpdatesTo(this)&#10;    }&#10;&#10;    // DiffUtil callback for efficient list updates&#10;    private class ItemDiffCallback(&#10;        private val oldList: List&lt;Item&gt;,&#10;        private val newList: List&lt;Item&gt;&#10;    ) : DiffUtil.Callback() {&#10;&#10;        override fun getOldListSize(): Int = oldList.size&#10;&#10;        override fun getNewListSize(): Int = newList.size&#10;&#10;        override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {&#10;            return oldList[oldItemPosition].id == newList[newItemPosition].id&#10;        }&#10;&#10;        override fun areContentsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean {&#10;            return oldList[oldItemPosition] == newList[newItemPosition]&#10;        }&#10;    }&#10;&#10;    class ItemViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val itemImage: ImageView = itemView.findViewById(R.id.itemImage)&#10;        private val itemName: TextView = itemView.findViewById(R.id.itemName)&#10;        private val itemDescription: TextView = itemView.findViewById(R.id.itemDescription)&#10;        private val itemCategory: TextView = itemView.findViewById(R.id.itemCategory)&#10;        private val itemLocation: TextView = itemView.findViewById(R.id.itemLocation)&#10;        private val itemDate: TextView = itemView.findViewById(R.id.itemDate)&#10;        private val claimButton: Button = itemView.findViewById(R.id.claimButton)&#10;&#10;        fun bind(&#10;            item: Item,&#10;            isLostItemsList: Boolean,&#10;            currentUserId: String,&#10;            onClaimButtonClick: ((Item) -&gt; Unit)?,&#10;            onItemClick: ((Item) -&gt; Unit)?&#10;        ) {&#10;            itemName.text = item.name&#10;            itemDescription.text = item.description&#10;            itemCategory.text = item.category&#10;&#10;            // Format date&#10;            val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;            when (item) {&#10;                is LostItem -&gt; {&#10;                    itemLocation.text = itemView.context.getString(R.string.lost_at, item.location)&#10;                    itemDate.text = itemView.context.getString(R.string.lost_on, dateFormat.format(item.dateLost.toDate()))&#10;                }&#10;                is FoundItem -&gt; {&#10;                    itemLocation.text = itemView.context.getString(R.string.found_at, item.location)&#10;                    itemDate.text = itemView.context.getString(R.string.found_on, dateFormat.format(item.dateFound.toDate()))&#10;                }&#10;            }&#10;&#10;            // Load image with Glide&#10;            if (item.imageUrl.isNotEmpty()) {&#10;                Glide.with(itemView.context)&#10;                    .load(item.imageUrl)&#10;                    .placeholder(R.drawable.ic_placeholder)&#10;                    .error(R.drawable.ic_error)&#10;                    .into(itemImage)&#10;            } else {&#10;                itemImage.setImageResource(R.drawable.ic_placeholder)&#10;            }&#10;&#10;            // Set up claim button&#10;            if (item.reportedBy == currentUserId) {&#10;                claimButton.visibility = View.GONE&#10;            } else {&#10;                claimButton.visibility = View.VISIBLE&#10;                claimButton.text = if (isLostItemsList) {&#10;                    itemView.context.getString(R.string.i_found_this)&#10;                } else {&#10;                    itemView.context.getString(R.string.this_is_mine)&#10;                }&#10;                claimButton.setOnClickListener {&#10;                    onClaimButtonClick?.invoke(item)&#10;                }&#10;            }&#10;&#10;            // Set up item click&#10;            itemView.setOnClickListener {&#10;                onItemClick?.invoke(item)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/utils/SearchFilterManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/utils/SearchFilterManager.kt" />
              <option name="originalContent" value="package com.example.campus_lost_found.utils&#10;&#10;import android.app.DatePickerDialog&#10;import android.content.Context&#10;import android.text.Editable&#10;import android.text.TextWatcher&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.widget.ArrayAdapter&#10;import android.widget.EditText&#10;import android.widget.Spinner&#10;import androidx.appcompat.app.AlertDialog&#10;import com.example.campus_lost_found.R&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.android.material.chip.Chip&#10;import com.google.android.material.chip.ChipGroup&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.android.material.textfield.TextInputEditText&#10;import com.google.firebase.Timestamp&#10;import java.text.SimpleDateFormat&#10;import java.util.Calendar&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class SearchFilterManager(&#10;    private val context: Context,&#10;    private val rootView: View,&#10;    private val onSearchFiltersChanged: (&#10;        query: String,&#10;        categories: List&lt;String&gt;,&#10;        startDate: Date?,&#10;        endDate: Date?,&#10;        location: String?&#10;    ) -&gt; Unit&#10;) {&#10;    private val searchEditText: TextInputEditText = rootView.findViewById(R.id.search_edit_text)&#10;    private val categoryChipGroup: ChipGroup = rootView.findViewById(R.id.category_chip_group)&#10;    private val dateFilterButton: MaterialButton = rootView.findViewById(R.id.date_filter_button)&#10;    private val locationFilterButton: MaterialButton = rootView.findViewById(R.id.location_filter_button)&#10;&#10;    private var searchQuery: String = &quot;&quot;&#10;    private val selectedCategories = mutableListOf&lt;String&gt;()&#10;    private var startDate: Date? = null&#10;    private var endDate: Date? = null&#10;    private var selectedLocation: String? = null&#10;&#10;    // Pre-defined campus locations&#10;    private val campusLocations = listOf(&#10;        &quot;Library&quot;, &quot;Student Center&quot;, &quot;Academic Building&quot;, &quot;Cafeteria&quot;, &#10;        &quot;Gymnasium&quot;, &quot;Dormitory&quot;, &quot;Parking Lot&quot;, &quot;Auditorium&quot;, &quot;Labs&quot;&#10;    )&#10;&#10;    init {&#10;        setupSearchListener()&#10;        setupCategoryChips()&#10;        setupDateFilter()&#10;        setupLocationFilter()&#10;    }&#10;&#10;    private fun setupSearchListener() {&#10;        searchEditText.addTextChangedListener(object : TextWatcher {&#10;            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}&#10;            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}&#10;            override fun afterTextChanged(s: Editable?) {&#10;                searchQuery = s?.toString()?.trim() ?: &quot;&quot;&#10;                notifyFiltersChanged()&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun setupCategoryChips() {&#10;        // Set up click listeners for all category chips&#10;        for (i in 0 until categoryChipGroup.childCount) {&#10;            val chip = categoryChipGroup.getChildAt(i) as Chip&#10;            chip.setOnCheckedChangeListener { _, isChecked -&gt;&#10;                val category = chip.text.toString()&#10;                if (isChecked) {&#10;                    if (!selectedCategories.contains(category)) {&#10;                        selectedCategories.add(category)&#10;                    }&#10;                } else {&#10;                    selectedCategories.remove(category)&#10;                }&#10;                notifyFiltersChanged()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupDateFilter() {&#10;        val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;        &#10;        dateFilterButton.setOnClickListener {&#10;            // Create a dialog for date range selection&#10;            val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_date_range, null)&#10;            val startDateButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.start_date_button)&#10;            val endDateButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.end_date_button)&#10;            val clearButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.clear_date_button)&#10;&#10;            // Initialize with current values&#10;            startDateButton.text = startDate?.let { dateFormat.format(it) } ?: &quot;Select Start Date&quot;&#10;            endDateButton.text = endDate?.let { dateFormat.format(it) } ?: &quot;Select End Date&quot;&#10;&#10;            // Start date button - use MaterialDatePicker for better calendar selection&#10;            startDateButton.setOnClickListener {&#10;                val builder = com.google.android.material.datepicker.MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select Start Date&quot;)&#10;&#10;                // If there's already a start date, select it in the picker&#10;                if (startDate != null) {&#10;                    builder.setSelection(startDate!!.time)&#10;                }&#10;&#10;                val datePicker = builder.build()&#10;&#10;                datePicker.addOnPositiveButtonClickListener { selection -&gt;&#10;                    startDate = Date(selection)&#10;                    startDateButton.text = dateFormat.format(startDate!!)&#10;                }&#10;&#10;                // Show the calendar picker&#10;                datePicker.show((context as androidx.fragment.app.FragmentActivity).supportFragmentManager, &quot;START_DATE_PICKER&quot;)&#10;            }&#10;&#10;            // End date button - use MaterialDatePicker for better calendar selection&#10;            endDateButton.setOnClickListener {&#10;                val builder = com.google.android.material.datepicker.MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select End Date&quot;)&#10;&#10;                // If there's already an end date, select it in the picker&#10;                if (endDate != null) {&#10;                    builder.setSelection(endDate!!.time)&#10;                }&#10;&#10;                val datePicker = builder.build()&#10;&#10;                datePicker.addOnPositiveButtonClickListener { selection -&gt;&#10;                    endDate = Date(selection)&#10;                    endDateButton.text = dateFormat.format(endDate!!)&#10;                }&#10;&#10;                // Show the calendar picker&#10;                datePicker.show((context as androidx.fragment.app.FragmentActivity).supportFragmentManager, &quot;END_DATE_PICKER&quot;)&#10;            }&#10;&#10;            clearButton.setOnClickListener {&#10;                startDate = null&#10;                endDate = null&#10;                startDateButton.text = &quot;Select Start Date&quot;&#10;                endDateButton.text = &quot;Select End Date&quot;&#10;            }&#10;&#10;            // Show dialog&#10;            MaterialAlertDialogBuilder(context)&#10;                .setTitle(&quot;Select Date Range&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Apply&quot;) { _, _ -&gt;&#10;                    updateDateFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .show()&#10;        }&#10;    }&#10;&#10;    private fun setupLocationFilter() {&#10;        locationFilterButton.setOnClickListener {&#10;            val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_location_filter, null)&#10;            val locationSpinner = dialogView.findViewById&lt;Spinner&gt;(R.id.location_spinner)&#10;            val locationEditText = dialogView.findViewById&lt;EditText&gt;(R.id.location_edit_text)&#10;            &#10;            // Set up the spinner with campus locations&#10;            val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, &#10;                listOf(&quot;Select location...&quot;) + campusLocations + &quot;Other&quot;)&#10;            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;            locationSpinner.adapter = adapter&#10;            &#10;            // Set initial selection based on current filter&#10;            if (selectedLocation != null) {&#10;                val position = campusLocations.indexOf(selectedLocation)&#10;                if (position &gt;= 0) {&#10;                    locationSpinner.setSelection(position + 1) // +1 for the &quot;Select location...&quot; item&#10;                } else {&#10;                    locationSpinner.setSelection(adapter.count - 1) // &quot;Other&quot; option&#10;                    locationEditText.setText(selectedLocation)&#10;                    locationEditText.visibility = View.VISIBLE&#10;                }&#10;            }&#10;            &#10;            // Show/hide the EditText based on the &quot;Other&quot; selection&#10;            locationSpinner.setOnItemSelectedListener(object : android.widget.AdapterView.OnItemSelectedListener {&#10;                override fun onItemSelected(parent: android.widget.AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) {&#10;                    locationEditText.visibility = if (position == adapter.count - 1) View.VISIBLE else View.GONE&#10;                }&#10;                override fun onNothingSelected(parent: android.widget.AdapterView&lt;*&gt;?) {}&#10;            })&#10;&#10;            // Show dialog&#10;            MaterialAlertDialogBuilder(context)&#10;                .setTitle(&quot;Filter by Location&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Apply&quot;) { _, _ -&gt;&#10;                    val position = locationSpinner.selectedItemPosition&#10;                    selectedLocation = when {&#10;                        position == 0 -&gt; null // &quot;Select location...&quot;&#10;                        position &lt; adapter.count - 1 -&gt; adapter.getItem(position).toString() // Campus locations&#10;                        else -&gt; locationEditText.text.toString().takeIf { it.isNotBlank() } // &quot;Other&quot; with custom input&#10;                    }&#10;                    updateLocationFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .setNegativeButton(&quot;Clear&quot;) { _, _ -&gt;&#10;                    selectedLocation = null&#10;                    updateLocationFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .show()&#10;        }&#10;    }&#10;&#10;    private fun updateDateFilterButtonText() {&#10;        val dateFormat = SimpleDateFormat(&quot;MM/dd&quot;, Locale.getDefault())&#10;        dateFilterButton.text = when {&#10;            startDate != null &amp;&amp; endDate != null -&gt; &#10;                &quot;${dateFormat.format(startDate!!)} - ${dateFormat.format(endDate!!)}&quot;&#10;            startDate != null -&gt; &#10;                &quot;From ${dateFormat.format(startDate!!)}&quot;&#10;            endDate != null -&gt; &#10;                &quot;Until ${dateFormat.format(endDate!!)}&quot;&#10;            else -&gt; &#10;                &quot;Date Range&quot;&#10;        }&#10;    }&#10;    &#10;    private fun updateLocationFilterButtonText() {&#10;        locationFilterButton.text = selectedLocation ?: &quot;Location&quot;&#10;    }&#10;&#10;    private fun notifyFiltersChanged() {&#10;        onSearchFiltersChanged(searchQuery, selectedCategories, startDate, endDate, selectedLocation)&#10;    }&#10;&#10;    // Utility method to convert Date to Firestore Timestamp&#10;    fun getStartTimestamp(): Timestamp? = startDate?.let { Timestamp(it) }&#10;    fun getEndTimestamp(): Timestamp? = endDate?.let { Timestamp(it) }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.campus_lost_found.utils&#10;&#10;import android.app.DatePickerDialog&#10;import android.content.Context&#10;import android.text.Editable&#10;import android.text.TextWatcher&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.widget.ArrayAdapter&#10;import android.widget.EditText&#10;import android.widget.Spinner&#10;import androidx.appcompat.app.AlertDialog&#10;import com.example.campus_lost_found.R&#10;import com.google.android.material.button.MaterialButton&#10;import com.google.android.material.chip.Chip&#10;import com.google.android.material.chip.ChipGroup&#10;import com.google.android.material.dialog.MaterialAlertDialogBuilder&#10;import com.google.android.material.textfield.TextInputEditText&#10;import com.google.firebase.Timestamp&#10;import java.text.SimpleDateFormat&#10;import java.util.Calendar&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class SearchFilterManager(&#10;    private val context: Context,&#10;    private val rootView: View,&#10;    private val onSearchFiltersChanged: (&#10;        query: String,&#10;        categories: List&lt;String&gt;,&#10;        startDate: Date?,&#10;        endDate: Date?,&#10;        location: String?&#10;    ) -&gt; Unit&#10;) {&#10;    private val searchEditText: TextInputEditText = rootView.findViewById(R.id.search_edit_text)&#10;    private val categoryChipGroup: ChipGroup = rootView.findViewById(R.id.category_chip_group)&#10;    private val dateFilterButton: MaterialButton = rootView.findViewById(R.id.date_filter_button)&#10;    private val locationFilterButton: MaterialButton = rootView.findViewById(R.id.location_filter_button)&#10;&#10;    private var searchQuery: String = &quot;&quot;&#10;    private val selectedCategories = mutableListOf&lt;String&gt;()&#10;    private var startDate: Date? = null&#10;    private var endDate: Date? = null&#10;    private var selectedLocation: String? = null&#10;&#10;    // Pre-defined campus locations&#10;    private val campusLocations = listOf(&#10;        &quot;Library&quot;, &quot;Student Center&quot;, &quot;Academic Building&quot;, &quot;Cafeteria&quot;, &#10;        &quot;Gymnasium&quot;, &quot;Dormitory&quot;, &quot;Parking Lot&quot;, &quot;Auditorium&quot;, &quot;Labs&quot;&#10;    )&#10;&#10;    init {&#10;        setupSearchListener()&#10;        setupCategoryChips()&#10;        setupDateFilter()&#10;        setupLocationFilter()&#10;    }&#10;&#10;    private fun setupSearchListener() {&#10;        searchEditText.addTextChangedListener(object : TextWatcher {&#10;            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}&#10;            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}&#10;            override fun afterTextChanged(s: Editable?) {&#10;                searchQuery = s?.toString()?.trim() ?: &quot;&quot;&#10;                notifyFiltersChanged()&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun setupCategoryChips() {&#10;        // Set up click listeners for all category chips&#10;        for (i in 0 until categoryChipGroup.childCount) {&#10;            val chip = categoryChipGroup.getChildAt(i) as Chip&#10;            chip.setOnCheckedChangeListener { _, isChecked -&gt;&#10;                val category = chip.text.toString()&#10;                if (isChecked) {&#10;                    if (!selectedCategories.contains(category)) {&#10;                        selectedCategories.add(category)&#10;                    }&#10;                } else {&#10;                    selectedCategories.remove(category)&#10;                }&#10;                notifyFiltersChanged()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun setupDateFilter() {&#10;        val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;        &#10;        dateFilterButton.setOnClickListener {&#10;            // Create a dialog for date range selection&#10;            val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_date_range, null)&#10;            val startDateButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.start_date_button)&#10;            val endDateButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.end_date_button)&#10;            val clearButton = dialogView.findViewById&lt;MaterialButton&gt;(R.id.clear_date_button)&#10;&#10;            // Initialize with current values&#10;            startDateButton.text = startDate?.let { dateFormat.format(it) } ?: &quot;Select Start Date&quot;&#10;            endDateButton.text = endDate?.let { dateFormat.format(it) } ?: &quot;Select End Date&quot;&#10;&#10;            // Start date button - use MaterialDatePicker for better calendar selection&#10;            startDateButton.setOnClickListener {&#10;                val builder = com.google.android.material.datepicker.MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select Start Date&quot;)&#10;&#10;                // If there's already a start date, select it in the picker&#10;                if (startDate != null) {&#10;                    builder.setSelection(startDate!!.time)&#10;                }&#10;&#10;                val datePicker = builder.build()&#10;&#10;                datePicker.addOnPositiveButtonClickListener { selection -&gt;&#10;                    startDate = Date(selection)&#10;                    startDateButton.text = dateFormat.format(startDate!!)&#10;                }&#10;&#10;                // Show the calendar picker&#10;                datePicker.show((context as androidx.fragment.app.FragmentActivity).supportFragmentManager, &quot;START_DATE_PICKER&quot;)&#10;            }&#10;&#10;            // End date button - use MaterialDatePicker for better calendar selection&#10;            endDateButton.setOnClickListener {&#10;                val builder = com.google.android.material.datepicker.MaterialDatePicker.Builder.datePicker()&#10;                    .setTitleText(&quot;Select End Date&quot;)&#10;&#10;                // If there's already an end date, select it in the picker&#10;                if (endDate != null) {&#10;                    builder.setSelection(endDate!!.time)&#10;                }&#10;&#10;                val datePicker = builder.build()&#10;&#10;                datePicker.addOnPositiveButtonClickListener { selection -&gt;&#10;                    endDate = Date(selection)&#10;                    endDateButton.text = dateFormat.format(endDate!!)&#10;                }&#10;&#10;                // Show the calendar picker&#10;                datePicker.show((context as androidx.fragment.app.FragmentActivity).supportFragmentManager, &quot;END_DATE_PICKER&quot;)&#10;            }&#10;&#10;            clearButton.setOnClickListener {&#10;                startDate = null&#10;                endDate = null&#10;                startDateButton.text = &quot;Select Start Date&quot;&#10;                endDateButton.text = &quot;Select End Date&quot;&#10;            }&#10;&#10;            // Show dialog&#10;            MaterialAlertDialogBuilder(context)&#10;                .setTitle(&quot;Select Date Range&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Apply&quot;) { _, _ -&gt;&#10;                    updateDateFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .show()&#10;        }&#10;    }&#10;&#10;    private fun setupLocationFilter() {&#10;        locationFilterButton.setOnClickListener {&#10;            val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_location_filter, null)&#10;            val locationSpinner = dialogView.findViewById&lt;Spinner&gt;(R.id.location_spinner)&#10;            val locationEditText = dialogView.findViewById&lt;EditText&gt;(R.id.location_edit_text)&#10;            &#10;            // Set up the spinner with campus locations&#10;            val adapter = ArrayAdapter(context, android.R.layout.simple_spinner_item, &#10;                listOf(&quot;Select location...&quot;) + campusLocations + &quot;Other&quot;)&#10;            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;            locationSpinner.adapter = adapter&#10;            &#10;            // Set initial selection based on current filter&#10;            if (selectedLocation != null) {&#10;                val position = campusLocations.indexOf(selectedLocation)&#10;                if (position &gt;= 0) {&#10;                    locationSpinner.setSelection(position + 1) // +1 for the &quot;Select location...&quot; item&#10;                } else {&#10;                    locationSpinner.setSelection(adapter.count - 1) // &quot;Other&quot; option&#10;                    locationEditText.setText(selectedLocation)&#10;                    locationEditText.visibility = View.VISIBLE&#10;                }&#10;            }&#10;            &#10;            // Show/hide the EditText based on the &quot;Other&quot; selection&#10;            locationSpinner.setOnItemSelectedListener(object : android.widget.AdapterView.OnItemSelectedListener {&#10;                override fun onItemSelected(parent: android.widget.AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) {&#10;                    locationEditText.visibility = if (position == adapter.count - 1) View.VISIBLE else View.GONE&#10;                }&#10;                override fun onNothingSelected(parent: android.widget.AdapterView&lt;*&gt;?) {}&#10;            })&#10;&#10;            // Show dialog&#10;            MaterialAlertDialogBuilder(context)&#10;                .setTitle(&quot;Filter by Location&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Apply&quot;) { _, _ -&gt;&#10;                    val position = locationSpinner.selectedItemPosition&#10;                    selectedLocation = when {&#10;                        position == 0 -&gt; null // &quot;Select location...&quot;&#10;                        position &lt; adapter.count - 1 -&gt; adapter.getItem(position).toString() // Campus locations&#10;                        else -&gt; locationEditText.text.toString().takeIf { it.isNotBlank() } // &quot;Other&quot; with custom input&#10;                    }&#10;                    updateLocationFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .setNegativeButton(&quot;Clear&quot;) { _, _ -&gt;&#10;                    selectedLocation = null&#10;                    updateLocationFilterButtonText()&#10;                    notifyFiltersChanged()&#10;                }&#10;                .setNeutralButton(&quot;Cancel&quot;, null)&#10;                .show()&#10;        }&#10;    }&#10;&#10;    private fun updateDateFilterButtonText() {&#10;        val dateFormat = SimpleDateFormat(&quot;MMM dd&quot;, Locale.getDefault())&#10;        &#10;        dateFilterButton.text = when {&#10;            startDate != null &amp;&amp; endDate != null -&gt; &#10;                &quot;${dateFormat.format(startDate!!)} - ${dateFormat.format(endDate!!)}&quot;&#10;            startDate != null -&gt; &#10;                &quot;From ${dateFormat.format(startDate!!)}&quot;&#10;            endDate != null -&gt; &#10;                &quot;Until ${dateFormat.format(endDate!!)}&quot;&#10;            else -&gt; &#10;                &quot;Date Filter&quot;&#10;        }&#10;    }&#10;&#10;    private fun updateLocationFilterButtonText() {&#10;        locationFilterButton.text = selectedLocation ?: &quot;Location&quot;&#10;    }&#10;&#10;    private fun notifyFiltersChanged() {&#10;        onSearchFiltersChanged(searchQuery, selectedCategories, startDate, endDate, selectedLocation)&#10;    }&#10;&#10;    // Helper methods for converting between Date and Timestamp&#10;    fun getStartTimestamp(): Timestamp? {&#10;        return startDate?.let { Timestamp(it) }&#10;    }&#10;&#10;    fun getEndTimestamp(): Timestamp? {&#10;        // If end date is specified, add 23:59:59 to include the whole day&#10;        return endDate?.let {&#10;            val calendar = Calendar.getInstance()&#10;            calendar.time = it&#10;            calendar.set(Calendar.HOUR_OF_DAY, 23)&#10;            calendar.set(Calendar.MINUTE, 59)&#10;            calendar.set(Calendar.SECOND, 59)&#10;            Timestamp(calendar.time)&#10;        }&#10;    }&#10;&#10;    fun clearAllFilters() {&#10;        searchEditText.setText(&quot;&quot;)&#10;        searchQuery = &quot;&quot;&#10;        &#10;        // Clear category selections&#10;        for (i in 0 until categoryChipGroup.childCount) {&#10;            val chip = categoryChipGroup.getChildAt(i) as Chip&#10;            chip.isChecked = false&#10;        }&#10;        selectedCategories.clear()&#10;        &#10;        // Clear date filter&#10;        startDate = null&#10;        endDate = null&#10;        dateFilterButton.text = &quot;Date Filter&quot;&#10;        &#10;        // Clear location filter&#10;        selectedLocation = null&#10;        locationFilterButton.text = &quot;Location&quot;&#10;        &#10;        // Notify that filters changed&#10;        notifyFiltersChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/utils/SupabaseManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/campus_lost_found/utils/SupabaseManager.kt" />
              <option name="originalContent" value="package com.example.campus_lost_found.utils&#10;&#10;import android.content.Context&#10;import android.net.Uri&#10;import android.util.Log&#10;import com.example.campus_lost_found.config.SupabaseConfig&#10;import io.github.jan.supabase.createSupabaseClient&#10;import io.github.jan.supabase.storage.Storage&#10;import io.github.jan.supabase.storage.storage&#10;import io.ktor.client.HttpClient&#10;import io.ktor.client.engine.android.Android&#10;import java.io.InputStream&#10;import java.util.UUID&#10;&#10;class SupabaseManager private constructor() {&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: SupabaseManager? = null&#10;&#10;        fun getInstance(): SupabaseManager {&#10;            return INSTANCE ?: synchronized(this) {&#10;                INSTANCE ?: SupabaseManager().also { INSTANCE = it }&#10;            }&#10;        }&#10;    }&#10;&#10;    private val supabaseClient by lazy {&#10;        createSupabaseClient(&#10;            supabaseUrl = SupabaseConfig.SUPABASE_URL,&#10;            supabaseKey = SupabaseConfig.SUPABASE_ANON_KEY&#10;        ) {&#10;            install(Storage)&#10;        }&#10;    }&#10;&#10;    private val storage by lazy { supabaseClient.storage }&#10;&#10;    suspend fun uploadImage(&#10;        context: Context,&#10;        imageUri: Uri,&#10;        userId: String&#10;    ): Result&lt;String&gt; {&#10;        return try {&#10;            val inputStream: InputStream? = context.contentResolver.openInputStream(imageUri)&#10;            val imageBytes = inputStream?.readBytes()&#10;            inputStream?.close()&#10;&#10;            if (imageBytes == null) {&#10;                return Result.failure(Exception(&quot;Failed to read image data&quot;))&#10;            }&#10;&#10;            // Generate unique filename&#10;            val fileName = &quot;${userId}_${UUID.randomUUID()}.jpg&quot;&#10;&#10;            Log.d(&quot;SupabaseManager&quot;, &quot;Uploading image: $fileName to bucket: ${SupabaseConfig.STORAGE_BUCKET}&quot;)&#10;&#10;            // Upload to Supabase Storage with proper error handling&#10;            try {&#10;                storage.from(SupabaseConfig.STORAGE_BUCKET).upload(fileName, imageBytes) {&#10;                    upsert = false // Don't overwrite existing files&#10;                }&#10;&#10;                // Get public URL&#10;                val publicUrl = storage.from(SupabaseConfig.STORAGE_BUCKET).publicUrl(fileName)&#10;&#10;                Log.d(&quot;SupabaseManager&quot;, &quot;Image uploaded successfully: $publicUrl&quot;)&#10;                Result.success(publicUrl)&#10;&#10;            } catch (storageException: Exception) {&#10;                Log.e(&quot;SupabaseManager&quot;, &quot;Storage upload failed: ${storageException.message}&quot;)&#10;&#10;                // Provide more specific error messages&#10;                val errorMessage = when {&#10;                    storageException.message?.contains(&quot;row-level security&quot;) == true -&gt;&#10;                        &quot;Storage permissions not configured. Please check Supabase bucket policies.&quot;&#10;                    storageException.message?.contains(&quot;bucket&quot;) == true -&gt;&#10;                        &quot;Storage bucket 'item-images' not found. Please create it in Supabase dashboard.&quot;&#10;                    storageException.message?.contains(&quot;auth&quot;) == true -&gt;&#10;                        &quot;Authentication failed. Please check Supabase credentials.&quot;&#10;                    else -&gt; &quot;Upload failed: ${storageException.message}&quot;&#10;                }&#10;&#10;                Result.failure(Exception(errorMessage))&#10;            }&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;SupabaseManager&quot;, &quot;Failed to upload image: ${e.message}&quot;)&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun deleteImage(imageUrl: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Extract filename from URL&#10;            val fileName = imageUrl.substringAfterLast(&quot;/&quot;)&#10;            storage.from(SupabaseConfig.STORAGE_BUCKET).delete(fileName)&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;SupabaseManager&quot;, &quot;Failed to delete image: ${e.message}&quot;)&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.campus_lost_found.utils&#10;&#10;import android.content.Context&#10;import android.net.Uri&#10;import android.util.Log&#10;import com.example.campus_lost_found.config.SupabaseConfig&#10;import io.github.jan.supabase.createSupabaseClient&#10;import io.github.jan.supabase.storage.Storage&#10;import io.github.jan.supabase.storage.storage&#10;import io.ktor.client.HttpClient&#10;import io.ktor.client.engine.android.Android&#10;import java.io.InputStream&#10;import java.util.UUID&#10;&#10;class SupabaseManager private constructor() {&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: SupabaseManager? = null&#10;&#10;        fun getInstance(): SupabaseManager {&#10;            return INSTANCE ?: synchronized(this) {&#10;                INSTANCE ?: SupabaseManager().also { INSTANCE = it }&#10;            }&#10;        }&#10;    }&#10;&#10;    private val supabaseClient by lazy {&#10;        createSupabaseClient(&#10;            supabaseUrl = SupabaseConfig.SUPABASE_URL,&#10;            supabaseKey = SupabaseConfig.SUPABASE_ANON_KEY&#10;        ) {&#10;            install(Storage)&#10;        }&#10;    }&#10;&#10;    private val storage by lazy { supabaseClient.storage }&#10;&#10;    suspend fun uploadImage(&#10;        context: Context,&#10;        imageUri: Uri,&#10;        userId: String&#10;    ): Result&lt;String&gt; {&#10;        return try {&#10;            val inputStream: InputStream? = context.contentResolver.openInputStream(imageUri)&#10;            val imageBytes = inputStream?.readBytes()&#10;            inputStream?.close()&#10;&#10;            if (imageBytes == null) {&#10;                return Result.failure(Exception(&quot;Failed to read image data&quot;))&#10;            }&#10;&#10;            // Generate unique filename&#10;            val fileName = &quot;${userId}_${UUID.randomUUID()}.jpg&quot;&#10;&#10;            Log.d(&quot;SupabaseManager&quot;, &quot;Uploading image: $fileName to bucket: ${SupabaseConfig.STORAGE_BUCKET}&quot;)&#10;&#10;            // Upload to Supabase Storage with proper error handling&#10;            try {&#10;                storage.from(SupabaseConfig.STORAGE_BUCKET).upload(&#10;                    path = fileName,&#10;                    data = imageBytes,&#10;                    upsert = false // Don't overwrite existing files&#10;                )&#10;&#10;                // Get public URL&#10;                val publicUrl = storage.from(SupabaseConfig.STORAGE_BUCKET).publicUrl(fileName)&#10;&#10;                Log.d(&quot;SupabaseManager&quot;, &quot;Image uploaded successfully: $publicUrl&quot;)&#10;                Result.success(publicUrl)&#10;&#10;            } catch (storageException: Exception) {&#10;                Log.e(&quot;SupabaseManager&quot;, &quot;Storage upload failed: ${storageException.message}&quot;)&#10;&#10;                // Provide more specific error messages&#10;                val errorMessage = when {&#10;                    storageException.message?.contains(&quot;row-level security&quot;) == true -&gt;&#10;                        &quot;Storage permissions not configured. Please check Supabase bucket policies.&quot;&#10;                    storageException.message?.contains(&quot;bucket&quot;) == true -&gt;&#10;                        &quot;Storage bucket 'item-images' not found. Please create it in Supabase dashboard.&quot;&#10;                    storageException.message?.contains(&quot;auth&quot;) == true -&gt;&#10;                        &quot;Authentication failed. Please check Supabase credentials.&quot;&#10;                    else -&gt; &quot;Upload failed: ${storageException.message}&quot;&#10;                }&#10;&#10;                Result.failure(Exception(errorMessage))&#10;            }&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;SupabaseManager&quot;, &quot;Failed to upload image: ${e.message}&quot;)&#10;            Result.failure(e)&#10;        }&#10;    }&#10;&#10;    suspend fun deleteImage(imageUrl: String): Result&lt;Unit&gt; {&#10;        return try {&#10;            // Extract filename from URL&#10;            val fileName = imageUrl.substringAfterLast(&quot;/&quot;)&#10;            storage.from(SupabaseConfig.STORAGE_BUCKET).delete(fileName)&#10;            Result.success(Unit)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;SupabaseManager&quot;, &quot;Failed to delete image: ${e.message}&quot;)&#10;            Result.failure(e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/category_chip_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/category_chip_background.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;?attr/colorSecondaryContainer&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;?attr/colorSecondaryContainer&quot; /&gt;&#10;    &lt;corners android:radius=&quot;16dp&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;?attr/colorOutline&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_add.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_admin.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_admin.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C13.1,2 14,2.9 14,4C14,5.1 13.1,6 12,6C10.9,6 10,5.1 10,4C10,2.9 10.9,2 12,2ZM21,9V7L15,7V9C15,10.66 16.34,12 18,12C19.66,12 21,10.66 21,9ZM1,9C1,10.66 2.34,12 4,12C5.66,12 7,10.66 7,9V7H1V9ZM13,14H11C8.79,14 7,15.79 7,18V22H17V18C17,15.79 15.21,14 13,14Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_calendar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_calendar.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;16dp&quot;&#10;    android:height=&quot;16dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurfaceVariant&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M19,3h-1L18,1h-2v2L8,3L8,1L6,1v2L5,3c-1.11,0 -1.99,0.9 -1.99,2L3,19c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2L21,5c0,-1.1 -0.9,-2 -2,-2zM19,19L5,19L5,8h14v11zM7,10h5v5L7,15z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_dark_mode.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_dark_mode.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorControlNormal&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,3c-4.97,0 -9,4.03 -9,9s4.03,9 9,9s9,-4.03 9,-9c0,-0.46 -0.04,-0.92 -0.1,-1.36c-0.98,1.37 -2.58,2.26 -4.4,2.26c-2.98,0 -5.4,-2.42 -5.4,-5.4c0,-1.81 0.89,-3.42 2.26,-4.4C12.92,3.04 12.46,3 12,3L12,3z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_error.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_error.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorError&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM13,17h-2v-2h2v2zM13,13h-2L11,7h2v6z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_found.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_found.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M9,11H7v6h2v-6zM13,5h-2v12h2V5zM17,3h-2v16h2V3z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_light_mode.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_light_mode.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorControlNormal&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M12,7c-2.76,0 -5,2.24 -5,5s2.24,5 5,5s5,-2.24 5,-5S14.76,7 12,7zM2,13l2,0c0.55,0 1,-0.45 1,-1s-0.45,-1 -1,-1H2c-0.55,0 -1,0.45 -1,1S1.45,13 2,13zM20,13l2,0c0.55,0 1,-0.45 1,-1s-0.45,-1 -1,-1h-2c-0.55,0 -1,0.45 -1,1S19.45,13 20,13zM11,2v2c0,0.55 0.45,1 1,1s1,-0.45 1,-1V2c0,-0.55 -0.45,-1 -1,-1S11,1.45 11,2zM11,20v2c0,0.55 0.45,1 1,1s1,-0.45 1,-1v-2c0,-0.55 -0.45,-1 -1,-1S11,19.45 11,20zM5.99,4.58c-0.39,-0.39 -1.03,-0.39 -1.41,0c-0.39,0.39 -0.39,1.03 0,1.41l1.06,1.06c0.39,0.39 1.03,0.39 1.41,0s0.39,-1.03 0,-1.41L5.99,4.58zM18.36,16.95c-0.39,-0.39 -1.03,-0.39 -1.41,0c-0.39,0.39 -0.39,1.03 0,1.41l1.06,1.06c0.39,0.39 1.03,0.39 1.41,0c0.39,-0.39 0.39,-1.03 0,-1.41L18.36,16.95zM19.42,5.99c0.39,-0.39 0.39,-1.03 0,-1.41c-0.39,-0.39 -1.03,-0.39 -1.41,0l-1.06,1.06c-0.39,0.39 -0.39,1.03 0,1.41s1.03,0.39 1.41,0L19.42,5.99zM7.05,18.36c0.39,-0.39 0.39,-1.03 0,-1.41c-0.39,-0.39 -1.03,-0.39 -1.41,0l-1.06,1.06c-0.39,0.39 -0.39,1.03 0,1.41s1.03,0.39 1.41,0L7.05,18.36z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_location.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_location.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;16dp&quot;&#10;    android:height=&quot;16dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurfaceVariant&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M12,2C8.13,2 5,5.13 5,9c0,5.25 7,13 7,13s7,-7.75 7,-13c0,-3.87 -3.13,-7 -7,-7zM12,11.5c-1.38,0 -2.5,-1.12 -2.5,-2.5s1.12,-2.5 2.5,-2.5 2.5,1.12 2.5,2.5 -1.12,2.5 -2.5,2.5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_logout.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_logout.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M17,7l-1.41,1.41L18.17,11H8v2h10.17l-2.58,2.59L17,17l5,-5zM4,5h8V3H4c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h8v-2H4V5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_placeholder.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_placeholder.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurfaceVariant&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M21,19V5c0,-1.1 -0.9,-2 -2,-2H5c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2zM8.5,13.5l2.5,3.01L14.5,12l4.5,6H5l3.5,-4.5z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_refresh.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorControlNormal&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M17.65,6.35C16.2,4.9 14.21,4 12,4c-4.42,0 -7.99,3.58 -7.99,8s3.57,8 7.99,8c3.73,0 6.84,-2.55 7.73,-6h-2.08c-0.82,2.33 -3.04,4 -5.65,4 -3.31,0 -6,-2.69 -6,-6s2.69,-6 6,-6c1.66,0 3.14,0.69 4.22,1.78L13,11h7V4l-2.35,2.35z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_reports.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_reports.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_search.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_search.xml" />
              <option name="updatedContent" value="&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorOnSurface&quot;&gt;&#10;  &lt;path&#10;      android:fillColor=&quot;@android:color/white&quot;&#10;      android:pathData=&quot;M15.5,14h-0.79l-0.28,-0.27C15.41,12.59 16,11.11 16,9.5 16,5.91 13.09,3 9.5,3S3,5.91 3,9.5 5.91,16 9.5,16c1.61,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_admin_dashboard.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_admin_dashboard.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;?attr/colorSurface&quot;&#10;    tools:context=&quot;.AdminDashboardActivity&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&#10;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/admin_toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#10;            android:background=&quot;?attr/colorPrimaryContainer&quot;&#10;            android:elevation=&quot;4dp&quot;&#10;            app:title=&quot;Admin Dashboard&quot;&#10;            app:titleTextColor=&quot;?attr/colorOnPrimaryContainer&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.tabs.TabLayout&#10;            android:id=&quot;@+id/admin_tab_layout&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;?attr/colorPrimaryContainer&quot;&#10;            app:tabTextColor=&quot;?attr/colorOnPrimaryContainer&quot;&#10;            app:tabIndicatorColor=&quot;?attr/colorPrimary&quot;&#10;            app:tabSelectedTextColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Statistics Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/stats_card&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Dashboard Statistics&quot;&#10;                        android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;                        android:textColor=&quot;?attr/colorOnSurface&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_lost_items&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Lost Items&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_found_items&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Found Items&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_claims&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Total Claims&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/pending_claims&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorSecondary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Pending Claims&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- RecyclerView for Items --&gt;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/admin_recycler_view&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                tools:listitem=&quot;@layout/item_admin_report&quot;&#10;                tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;!-- Empty View --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/admin_empty_view&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:padding=&quot;32dp&quot;&#10;                android:text=&quot;No items found&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceBody1&quot;&#10;                android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&#10;    &lt;!-- Refresh FAB --&gt;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/admin_refresh_fab&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Refresh data&quot;&#10;        app:srcCompat=&quot;@drawable/ic_refresh&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;?attr/colorSurface&quot;&#10;    android:fitsSystemWindows=&quot;true&quot;&#10;    tools:context=&quot;.AdminDashboardActivity&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:fitsSystemWindows=&quot;true&quot;&gt;&#10;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/admin_toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#10;            android:background=&quot;?attr/colorPrimaryContainer&quot;&#10;            android:elevation=&quot;4dp&quot;&#10;            app:title=&quot;Admin Dashboard&quot;&#10;            app:titleTextColor=&quot;?attr/colorOnPrimaryContainer&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.tabs.TabLayout&#10;            android:id=&quot;@+id/admin_tab_layout&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:background=&quot;?attr/colorPrimaryContainer&quot;&#10;            app:tabTextColor=&quot;?attr/colorOnPrimaryContainer&quot;&#10;            app:tabIndicatorColor=&quot;?attr/colorPrimary&quot;&#10;            app:tabSelectedTextColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;androidx.core.widget.NestedScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- Statistics Card --&gt;&#10;            &lt;com.google.android.material.card.MaterialCardView&#10;                android:id=&quot;@+id/stats_card&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                app:cardCornerRadius=&quot;12dp&quot;&#10;                app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;16dp&quot;&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:text=&quot;Dashboard Statistics&quot;&#10;                        android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;                        android:textColor=&quot;?attr/colorOnSurface&quot;&#10;                        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;                    &lt;LinearLayout&#10;                        android:layout_width=&quot;match_parent&quot;&#10;                        android:layout_height=&quot;wrap_content&quot;&#10;                        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_lost_items&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Lost Items&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_found_items&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Found Items&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/total_claims&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorPrimary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Total Claims&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;&#10;                        &lt;LinearLayout&#10;                            android:layout_width=&quot;0dp&quot;&#10;                            android:layout_height=&quot;wrap_content&quot;&#10;                            android:layout_weight=&quot;1&quot;&#10;                            android:orientation=&quot;vertical&quot;&#10;                            android:gravity=&quot;center&quot;&gt;&#10;&#10;                            &lt;TextView&#10;                                android:id=&quot;@+id/pending_claims&quot;&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;0&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceHeadline5&quot;&#10;                                android:textColor=&quot;?attr/colorSecondary&quot; /&gt;&#10;&#10;                            &lt;TextView&#10;                                android:layout_width=&quot;wrap_content&quot;&#10;                                android:layout_height=&quot;wrap_content&quot;&#10;                                android:text=&quot;Pending Claims&quot;&#10;                                android:textAppearance=&quot;?attr/textAppearanceCaption&quot; /&gt;&#10;                        &lt;/LinearLayout&gt;&#10;                    &lt;/LinearLayout&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/com.google.android.material.card.MaterialCardView&gt;&#10;&#10;            &lt;!-- RecyclerView for Items --&gt;&#10;            &lt;androidx.recyclerview.widget.RecyclerView&#10;                android:id=&quot;@+id/admin_recycler_view&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                tools:listitem=&quot;@layout/item_admin_report&quot;&#10;                tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;            &lt;!-- Empty View --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/admin_empty_view&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:padding=&quot;32dp&quot;&#10;                android:text=&quot;No items found&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceBody1&quot;&#10;                android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;                android:visibility=&quot;visible&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/androidx.core.widget.NestedScrollView&gt;&#10;&#10;    &lt;!-- Refresh FAB --&gt;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/admin_refresh_fab&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_margin=&quot;16dp&quot;&#10;        android:contentDescription=&quot;Refresh data&quot;&#10;        app:srcCompat=&quot;@drawable/ic_refresh&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_claim_item.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_claim_item.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Please provide your contact information so the finder can reach you to arrange pickup.&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Contact information (phone, email, etc.)&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/contactInfoEditText&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:inputType=&quot;textMultiLine&quot;&#10;            android:minLines=&quot;2&quot;&#10;            android:maxLines=&quot;4&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;The person who found this item will be notified of your claim request.&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;        android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_date_range.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_date_range.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/start_date_button&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#10;        android:text=&quot;Select Start Date&quot;&#10;        app:icon=&quot;@android:drawable/ic_menu_my_calendar&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/end_date_button&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:text=&quot;Select End Date&quot;&#10;        app:icon=&quot;@android:drawable/ic_menu_my_calendar&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.button.MaterialButton&#10;        android:id=&quot;@+id/clear_date_button&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;end&quot;&#10;        android:text=&quot;Clear&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_location_filter.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_location_filter.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Select a campus location:&quot;&#10;        android:textAppearance=&quot;?attr/textAppearanceBody1&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;Spinner&#10;        android:id=&quot;@+id/location_spinner&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:hint=&quot;Other location&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/location_edit_text&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_items_list.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_items_list.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fitsSystemWindows=&quot;true&quot;&#10;    tools:context=&quot;.LostItemsFragment&quot;&gt;&#10;&#10;    &lt;!-- Search Filter Container --&gt;&#10;    &lt;LinearLayout&#10;        android:id=&quot;@+id/search_filter_container&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;SearchView&#10;            android:id=&quot;@+id/searchView&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:iconifiedByDefault=&quot;false&quot;&#10;            android:queryHint=&quot;Search items...&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.tabs.TabLayout&#10;        android:id=&quot;@+id/myReportsTabLayout&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/search_filter_container&quot;&#10;        tools:visibility=&quot;visible&quot; /&gt;&#10;&#10;    &lt;androidx.recyclerview.widget.RecyclerView&#10;        android:id=&quot;@+id/itemsRecyclerView&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:clipToPadding=&quot;false&quot;&#10;        android:padding=&quot;8dp&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toBottomOf=&quot;@id/myReportsTabLayout&quot;&#10;        tools:listitem=&quot;@layout/item_card&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/empty_view&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;No items found&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textColor=&quot;@color/on_surface&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/noItemsTextView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;No items to display&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textColor=&quot;@color/on_surface&quot;&#10;        android:visibility=&quot;gone&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_admin_report.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_admin_report.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;2dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/admin_item_image&quot;&#10;                android:layout_width=&quot;72dp&quot;&#10;                android:layout_height=&quot;72dp&quot;&#10;                android:scaleType=&quot;centerCrop&quot;&#10;                android:layout_marginEnd=&quot;16dp&quot;&#10;                tools:src=&quot;@drawable/ic_dark_mode&quot;&#10;                android:contentDescription=&quot;Item image&quot;/&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/admin_item_name&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textAppearance=&quot;?attr/textAppearanceHeadline6&quot;&#10;                    android:textColor=&quot;?attr/colorOnSurface&quot;&#10;                    tools:text=&quot;Blue Backpack&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/admin_item_category&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;                    android:textColor=&quot;?attr/colorPrimary&quot;&#10;                    tools:text=&quot;Category: Bags&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/admin_item_date&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;                    android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;                    tools:text=&quot;Date: August 8, 2023&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/admin_item_location&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;                    android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;                    tools:text=&quot;Location: Library&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/admin_item_status&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_gravity=&quot;top&quot;&#10;                app:chipBackgroundColor=&quot;?attr/colorSecondaryContainer&quot;&#10;                android:textColor=&quot;?attr/colorOnSecondaryContainer&quot;&#10;                tools:text=&quot;Pending&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/admin_item_description&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;            android:textColor=&quot;?attr/colorOnSurface&quot;&#10;            tools:text=&quot;Blue backpack with a laptop and some books inside. Found near the cafeteria.&quot;/&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/admin_claim_section&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:visibility=&quot;gone&quot;&#10;            tools:visibility=&quot;visible&quot;&gt;&#10;&#10;            &lt;View&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;1dp&quot;&#10;                android:background=&quot;?attr/colorOutline&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Claim Details&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceSubtitle1&quot;&#10;                android:textColor=&quot;?attr/colorOnSurface&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/admin_claim_by&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;                tools:text=&quot;Claimed by: John Doe&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/admin_claim_message&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceBody2&quot;&#10;                android:textStyle=&quot;italic&quot;&#10;                tools:text=&quot;Message: This is my backpack that I lost yesterday. I can describe the contents.&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;end&quot;&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/admin_btn_details&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Details&quot;/&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/admin_btn_approve&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Approve&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                tools:visibility=&quot;visible&quot;/&gt;&#10;&#10;            &lt;com.google.android.material.button.MaterialButton&#10;                android:id=&quot;@+id/admin_btn_reject&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Button.TextButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Reject&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:visibility=&quot;gone&quot;&#10;                tools:visibility=&quot;visible&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_card.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_card.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;4dp&quot;&#10;    app:strokeWidth=&quot;1dp&quot;&#10;    app:strokeColor=&quot;?attr/colorOutline&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/itemImage&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;200dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            android:background=&quot;?attr/colorSurfaceVariant&quot;&#10;            android:contentDescription=&quot;@string/item_image_description&quot;&#10;            android:scaleType=&quot;centerCrop&quot;&#10;            android:src=&quot;@drawable/ic_placeholder&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/itemName&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;4dp&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceHeadlineSmall&quot;&#10;            android:textColor=&quot;?attr/colorOnSurface&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            tools:text=&quot;Lost iPhone&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/itemDescription&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&#10;            android:maxLines=&quot;3&quot;&#10;            android:ellipsize=&quot;end&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceBodyMedium&quot;&#10;            android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;            tools:text=&quot;Black iPhone 13 with cracked screen protector. Lost near the library entrance.&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/itemCategory&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:background=&quot;@drawable/category_chip_background&quot;&#10;                android:padding=&quot;6dp&quot;&#10;                android:textAppearance=&quot;?attr/textAppearanceLabelSmall&quot;&#10;                android:textColor=&quot;?attr/colorOnSecondaryContainer&quot;&#10;                android:gravity=&quot;center&quot;&#10;                tools:text=&quot;Electronics&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/itemLocation&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;4dp&quot;&#10;            android:drawablePadding=&quot;8dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceBodySmall&quot;&#10;            android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;            app:drawableStartCompat=&quot;@drawable/ic_location&quot;&#10;            tools:text=&quot;Lost at: Main Library&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/itemDate&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            android:drawablePadding=&quot;8dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:textAppearance=&quot;?attr/textAppearanceBodySmall&quot;&#10;            android:textColor=&quot;?attr/colorOnSurfaceVariant&quot;&#10;            app:drawableStartCompat=&quot;@drawable/ic_calendar&quot;&#10;            tools:text=&quot;Lost on: Dec 15, 2024&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/claimButton&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/claim_item&quot;&#10;            app:backgroundTint=&quot;?attr/colorPrimary&quot;&#10;            app:cornerRadius=&quot;8dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/layout_search_filter.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/layout_search_filter.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;com.google.android.material.textfield.TextInputLayout&#10;        android:id=&quot;@+id/search_input_layout&quot;&#10;        style=&quot;@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#10;        android:hint=&quot;Search items&quot;&#10;        app:endIconMode=&quot;clear_text&quot;&#10;        app:startIconDrawable=&quot;@android:drawable/ic_menu_search&quot;&gt;&#10;&#10;        &lt;com.google.android.material.textfield.TextInputEditText&#10;            android:id=&quot;@+id/search_edit_text&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:imeOptions=&quot;actionSearch&quot;&#10;            android:inputType=&quot;text&quot; /&gt;&#10;    &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;    &lt;HorizontalScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:scrollbars=&quot;none&quot;&gt;&#10;&#10;        &lt;com.google.android.material.chip.ChipGroup&#10;            android:id=&quot;@+id/category_chip_group&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            app:singleSelection=&quot;false&quot;&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_electronics&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Electronics&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_books&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Books &amp;amp; Stationery&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_id_cards&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;ID Cards &amp;amp; Documents&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_keys&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Keys&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_clothing&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Clothing&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_accessories&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Accessories&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_wallet&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Wallet/Purse&quot; /&gt;&#10;&#10;            &lt;com.google.android.material.chip.Chip&#10;                android:id=&quot;@+id/chip_other&quot;&#10;                style=&quot;@style/Widget.MaterialComponents.Chip.Filter&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;Other&quot; /&gt;&#10;        &lt;/com.google.android.material.chip.ChipGroup&gt;&#10;    &lt;/HorizontalScrollView&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;8dp&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/date_filter_button&quot;&#10;            style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginEnd=&quot;4dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Date Range&quot;&#10;            app:icon=&quot;@android:drawable/ic_menu_today&quot; /&gt;&#10;&#10;        &lt;com.google.android.material.button.MaterialButton&#10;            android:id=&quot;@+id/location_filter_button&quot;&#10;            style=&quot;@style/Widget.MaterialComponents.Button.OutlinedButton&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;4dp&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;Location&quot;&#10;            app:icon=&quot;@android:drawable/ic_menu_mylocation&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/admin_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/admin_menu.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;    &#10;    &lt;item&#10;        android:id=&quot;@+id/menu_toggle_theme&quot;&#10;        android:icon=&quot;@drawable/ic_dark_mode&quot;&#10;        android:title=&quot;Toggle Theme&quot;&#10;        app:showAsAction=&quot;always&quot; /&gt;&#10;    &#10;    &lt;item&#10;        android:id=&quot;@+id/menu_logout&quot;&#10;        android:icon=&quot;@drawable/ic_logout&quot;&#10;        android:title=&quot;Logout&quot;&#10;        app:showAsAction=&quot;ifRoom&quot; /&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/bottom_navigation_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/bottom_navigation_menu.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/lostItemsFragment&quot;&#10;        android:icon=&quot;@drawable/ic_search&quot;&#10;        android:title=&quot;@string/lost_items&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/foundItemsFragment&quot;&#10;        android:icon=&quot;@drawable/ic_found&quot;&#10;        android:title=&quot;@string/found_items&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/myReportsFragment&quot;&#10;        android:icon=&quot;@drawable/ic_reports&quot;&#10;        android:title=&quot;@string/my_reports&quot; /&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/main_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/main_menu.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#10;&#10;    &lt;item&#10;        android:id=&quot;@+id/menu_admin&quot;&#10;        android:icon=&quot;@drawable/ic_admin&quot;&#10;        android:title=&quot;Admin Dashboard&quot;&#10;        app:showAsAction=&quot;ifRoom&quot; /&gt;&#10;&#10;&#10;    &lt;item&#10;        android:id=&quot;@+id/menu_logout&quot;&#10;        android:icon=&quot;@drawable/ic_logout&quot;&#10;        android:title=&quot;Logout&quot;&#10;        app:showAsAction=&quot;ifRoom&quot; /&gt;&#10;&lt;/menu&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&gt;&#13;&#10;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/menu_logout&quot;&#13;&#10;        android:icon=&quot;@drawable/ic_logout&quot;&#13;&#10;        android:title=&quot;@string/logout&quot;&#13;&#10;        app:showAsAction=&quot;never&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/menu_refresh&quot;&#13;&#10;        android:icon=&quot;@drawable/ic_refresh&quot;&#13;&#10;        android:title=&quot;@string/refresh&quot;&#13;&#10;        app:showAsAction=&quot;ifRoom&quot; /&gt;&#13;&#10;&#13;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>